<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Linux用户和组管理</title>
      <link href="/2019/09/03/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/"/>
      <url>/2019/09/03/Linux%E7%94%A8%E6%88%B7%E5%92%8C%E7%BB%84%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="Linux中用户和组相关文件"><a href="#Linux中用户和组相关文件" class="headerlink" title="Linux中用户和组相关文件"></a>Linux中用户和组相关文件</h2><h3 id="etc-passwd"><a href="#etc-passwd" class="headerlink" title="/etc/passwd"></a>/etc/passwd</h3><p> 存储用户账户信息,存储格式为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name:password:UID:GID:comment:directory:shell</span><br></pre></td></tr></table></figure><ul><li>name：用户登录名；</li><li>password：用户口令，用占位符x表示；</li><li>UID：用户ID，用户登录时，系统根据UID，而非用户名来识别用户；</li><li>GID：用户所属的主组ID；</li><li>comment：用户的注释信息；</li><li>directory：用户家目录的绝对路径；</li><li>shell：用户的默认shell。</li></ul><a id="more"></a><h3 id="etc-shadow"><a href="#etc-shadow" class="headerlink" title="/etc/shadow"></a>/etc/shadow</h3><p>存储用户密码信息</p><p>存储格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">登录名:$加密算法$salt$加密了的密码:最后一次更改密码的日期:密码最小期限:密码最大期限:密码警告时间段:密码禁用期:账户过期日期:保留字段</span><br></pre></td></tr></table></figure><h3 id="etc-group"><a href="#etc-group" class="headerlink" title="/etc/group"></a>/etc/group</h3><p>存储用户组信息, 存储格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">group_name:password:GID:user_list</span><br></pre></td></tr></table></figure><ul><li>group_name：组名；</li><li>password：用户组的口令，用占位符x表示，一般Linux用户组都没有口令；</li><li>GID：组ID；</li><li>user_list：用户列表，注意，这里列出的是以该组为附加组的用户列表，以此组为主组的用户没有列在此处。</li></ul><h2 id="用户类别和标识"><a href="#用户类别和标识" class="headerlink" title="用户类别和标识"></a>用户类别和标识</h2><h3 id="用户类别"><a href="#用户类别" class="headerlink" title="用户类别"></a>用户类别</h3><p>Linux中，用户分为两大类、三小类：<br>分别为<strong>管理员</strong>（一般为root）和<strong>普通用户</strong> 。<br>普通用户中，又划分为两类，分别为<em>系统用户</em>和<em>登录用户</em>。</p><p><strong>管理员</strong><br><strong>（超级用户root）</strong></p><p>可以操作系统中任意文件和命令，拥有最高的管理权限。</p><p><strong>普通用户</strong></p><p>又分为登录用户和系统用户：</p><ul><li><p>登录用户:  一般为管理员手动添加的用户，默认仅拥有操作自身家目录中文件及目录的权限，以及进入与浏览相关目录文件的权限（如/etc、/var/log等），但没有创建、修改、删除等权限。</p></li><li><p>系统用户:<br>一般为系统安装后默认存在的，且默认情况下不能登录系统，它们的存在主要是为了满足系统进程对文件属主的需求。</p><p>Tips：<em>在部署某些服务是，也可以手动添加某些系统用户。</em></p></li></ul><h3 id="用户标识-UID"><a href="#用户标识-UID" class="headerlink" title="用户标识(UID)"></a>用户标识(UID)</h3><p>Linux系统使用UID（User ID）来标识不同用户。<br>UID是16bits的二进制数字，所以换算成十进制，UID的范围是0~65535，Linux根据用户类别，对UID划分做了规定：</p><p><strong>管理员</strong><br><strong>UID为0</strong></p><p>Tips：当用户UID为0时，该用户就是管理员，所以不只root才是管理员，可以手动指定，但不建议。</p><p><strong>普通用户（1~65535）</strong></p><ul><li>系统用户<br>一般发行版为1~499（CentOS7为1~999）</li><li>登录用户<br>一般发行版为500~65535（CentOS7 为1000~65535）</li></ul><h2 id="组类别和组标识"><a href="#组类别和组标识" class="headerlink" title="组类别和组标识"></a>组类别和组标识</h2><h3 id="组类别"><a href="#组类别" class="headerlink" title="组类别"></a>组类别</h3><p>Linux对组有三种划分方法：</p><p><strong>用户类别</strong></p><ul><li>管理员组</li><li>普通用户组（包括系统用户组和登录用户组）</li></ul><p><strong>主组和附属组</strong></p><ul><li>用户的基本组（主组:<br>用户必须有且只能有一个基本组。</li><li>用户的附加组 （附属组) : 用户可以有0个、1个或多个附加组。<br>基本组和附加组就比如，每个人有一个用来安家的房子（基本组），还可以有N个用于投资的房子（附属组）。</li></ul><p><strong>私有和公共组</strong></p><ul><li>私有组: 每新建一个用户，如果不指定-g参数，都会自动创建一个和用户名同名的组，且组内只包含用户本身。</li><li>公共组: 组内可包含多个用户。</li></ul><h3 id="组标识-GID"><a href="#组标识-GID" class="headerlink" title="组标识(GID)"></a>组标识(GID)</h3><p>Linux系统使用GID（Group ID）来标识不同组。<br>GID的划分和UID相同。</p><h2 id="Linux用户和组管理命令"><a href="#Linux用户和组管理命令" class="headerlink" title="Linux用户和组管理命令"></a>Linux用户和组管理命令</h2><h3 id="组管理"><a href="#组管理" class="headerlink" title="组管理"></a>组管理</h3><h4 id="groupadd"><a href="#groupadd" class="headerlink" title="groupadd"></a>groupadd</h4><p>新建组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd [options] group</span><br></pre></td></tr></table></figure><ul><li>-g GID：指定GID：默认是上一个组的GID+1</li><li>-r：创建系统组</li></ul><h4 id="gourpmod"><a href="#gourpmod" class="headerlink" title="gourpmod"></a>gourpmod</h4><p>修改组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupmod [options] GROUP</span><br></pre></td></tr></table></figure><ul><li>-g GID：–gid GID：修改GID</li><li>-n NEW_NAME，修改组名</li></ul><h4 id="groupdel"><a href="#groupdel" class="headerlink" title="groupdel"></a>groupdel</h4><p>删除组</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel [options] GROUP</span><br></pre></td></tr></table></figure><p><em>tips: 当某user以某group为主组时，是无法使用groupdel命令删除该group的，但附加组不受影响。</em></p><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="useradd"><a href="#useradd" class="headerlink" title="useradd"></a>useradd</h4><p>新建用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd [options] LOGIN</span><br></pre></td></tr></table></figure><ul><li>u UID：–uid UID：指定UID，默认是上一个用户UID+1</li><li>-g GROUP：–gid GROUP：指定用户的基本组，此组必须事先存在</li><li>-G：–groups GROUP1,GROUP2…，指定用户的附加组，这些组必须事先存在</li><li>-c COMMENT：–comment COMMENT：添加注释</li><li>-d：–home HOME_DIR：指定用户家目录，通过复制/etc/skel并重命名实现的，指定的家目录路径如果事先存在，则不会为用户复制环境初始化配置文件（如.bashrc等）</li><li>-s：–shell SHELL：指定用户默认shell，可用的所有shell列表存储在/etc/shells文件中</li><li>-r：–system：创建系统用户</li></ul><h4 id="usermod"><a href="#usermod" class="headerlink" title="usermod"></a>usermod</h4><p> 修改用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod [options] LOGIN</span><br></pre></td></tr></table></figure><ul><li>-u UID：–uid UID：修改UID</li><li>-g GROUP：–gid GROUP：修改用户的基本组，此组必须事先存在</li><li>-G：–groups GROUP1,GROUP2…，修改用户的附加组，这些组须事先存在。<br>注意，原来的附加组会被覆盖。<br>如果只添加不覆盖，则配合使用-a选项。</li><li>-a：–append：与-G一同使用，添加用户的附加组</li><li>-c COMMENT：–comment COMMENT：修改注释</li><li>-d：–home HOME_DIR：修改用户家目录<br>用户原有的文件不会被转移至新位置。<br>如果需要转移，则配合使用-m选项。</li><li>-m：–move-home：只能与-d选项一同使用，用于将原来的家目录移动为新的家目录。</li><li>-l：–login NEW_LOGIN：修改用户登录名</li><li>-s：–shell SHELL：修改用户默认shell</li><li>-L：–lock：锁定用户的密码，即禁止用户登录。<br>其实就是在/etc/passwd文件中用户原来的密码字符串前添加一个“!”，使其不能匹配。</li><li>-U：–unlock：解锁用户的密码</li></ul><p>usermod的常用选项和useradd相同，只需注意-d和-G两个选项。</p><p>-G: 修改用户的附加组，这些组须事先存在。<br>注意，原来的附加组会被覆盖。</p><p>-d 和-m 的使用</p><ul><li><p>不移动家目录</p><p>例如只修改qinkai用户的家目录为/home/qinkai_newhome，不移动之前家目录的内容，则用-d选项</p><p><em>tips: 此目录须事先存在，否则只是更改了/etc/passwd中的记录，实际的目录是不会自动创建的</em></p></li><li><p>修改家目录的同时，移动以前家目录的内容, 将-d和-m选项同时使用。</p><p><em>tips: 目标目录不要事先存在，否则和只用-d的效果是一样的</em></p></li></ul><h4 id="userdel"><a href="#userdel" class="headerlink" title="userdel"></a>userdel</h4><p> 删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel [options] LOGIN</span><br></pre></td></tr></table></figure><ul><li>-r：删除用户时一并删除用户家目录</li></ul><h4 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h4><p>修改用户密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd [options] [username]</span><br></pre></td></tr></table></figure><p>passwd：不带任何选项：修改当前登录用户自己的密码</p><p>passwd USER：修改指定用户的密码，默认仅root用户有此权限</p><ul><li>-l：–lock：锁定用户</li><li>-u：–unlock：解锁用户</li><li>-d：–delete：清除用户密码</li><li>-e：–expire DATE：过期期限（日期）</li><li>-i：–inactive DAYS：非活动期限（时长）</li><li>-n：–minimum DAYS：密码的最短使用期限</li><li>-m：–maximum DAYS：密码的最长使用期限</li><li>-w：–warning DAYS：警告期限</li></ul><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><h4 id="su"><a href="#su" class="headerlink" title="su"></a>su</h4><p>登录切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su [options...] [-] [user [args...]]</span><br></pre></td></tr></table></figure><ul><li>- 登录式切换：会通过重新读取目标用户的配置文件来重新初始化</li><li>-c COMMAND:  仅以指定用户的身份运行此处指定的命令</li></ul><h4 id="whoami"><a href="#whoami" class="headerlink" title="whoami"></a>whoami</h4><p>查看当前登录的用户。</p>]]></content>
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>hexo+github搭建个人博客</title>
      <link href="/2019/08/30/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/08/30/hexo-github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      <content type="html"><![CDATA[<h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>node.js</li><li>git</li></ul><p>安装hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="利用hexo搭建一个博客"><a href="#利用hexo搭建一个博客" class="headerlink" title="利用hexo搭建一个博客"></a>利用hexo搭建一个博客</h2><p><strong>创建博客目录qin-k.github.io</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init qin-k.github.io</span><br><span class="line">cd qin-k.github.io</span><br><span class="line">npm instal</span><br></pre></td></tr></table></figure><p><strong>运行</strong></p><ul><li><p>hexo clean: 清除缓存,删除生成的pulic目录文件</p></li><li><p>hexo g(generate): 生成静态页面</p></li><li><p>hexo s(server): 运行</p><p>打开浏览器，输入地址 <strong>localhost:4000</strong> 即可看到效果 </p></li></ul><h2 id="基本配置及美化"><a href="#基本配置及美化" class="headerlink" title="基本配置及美化"></a>基本配置及美化</h2><p>网站的设置大部分都在项目录入<code>_config.yml</code>文件中, 主题配置在themes主题目录下对应主题下的<code>_config.yml</code>。</p><p>官方文档:<a href="https://hexo.io/zh-cn/docs/configuration.html">https://hexo.io/zh-cn/docs/configuration.html</a></p><p>**注:**修改配置后需要<code>hexo clean</code>清除缓存重新<code>hexo g</code>生成静态页面。</p><h3 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h3><p>基本配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">秦凯的博客</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">笨鸟先飞</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">这是个人博客</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="string">个人,技术,博客</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">秦凯</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span></span><br></pre></td></tr></table></figure><h3 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h3><p>使用其他主题，如next</p><p><strong>下载主题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p><strong>网站配置中使用next主题</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>设置菜单使用tags和categories</p><p>首先在主题配置中menu处取消注释:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure><p>创建对应页面:<code>hexo new page &quot;tags&quot;</code></p><p>会在source目录下生成categories目录其中包含index.md 文件。修改此文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">tags</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2019-08-29 22:57:41</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>categories和about等的添加于此类似</p><h3 id="主题美化"><a href="#主题美化" class="headerlink" title="主题美化"></a>主题美化</h3><p><strong>修改网站图标</strong></p><p>将16x16和32x32的图标文件传到<code>themes\next\source\images</code>下。</p><p>修改主题配置文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">favicon:</span></span><br><span class="line">  <span class="attr">small:</span> <span class="string">/images/favicon16x16.png</span></span><br><span class="line">  <span class="attr">medium:</span> <span class="string">/images/favicon32x32.png</span></span><br><span class="line">  <span class="attr">apple_touch_icon:</span> <span class="string">/images/apple-touch-icon-next.png</span></span><br><span class="line">  <span class="attr">safari_pinned_tab:</span> <span class="string">/images/logo.svg</span></span><br><span class="line">  <span class="comment">#android_manifest: /images/manifest.json</span></span><br><span class="line">  <span class="comment">#ms_browserconfig: /images/browserconfig.xml</span></span><br></pre></td></tr></table></figure><p><strong>设置头像</strong></p><p><code>themes/next/_config.yml</code>中设置：在source/images/avatar.png添加头像。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># In theme directory (source/images): /images/avatar.gif</span></span><br><span class="line">  <span class="comment"># In site directory (source/uploads): /uploads/avatar.gif</span></span><br><span class="line">  <span class="comment"># You can also use other linking images.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar would be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>设置Scheme</strong></p><p>选择自己喜欢的scheme</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Pisces</span></span><br><span class="line"><span class="comment">#scheme: Gemini</span></span><br></pre></td></tr></table></figure><p><strong>修改footer添加访客人数和总访问量</strong></p><p>在<code>footer.swig</code>中添加标签，同时我们还可以通过修改主题配置来方便选择是否显示访问量，步骤如下：首先，我们在next主题下的<code>_config.yml</code>中加入以下配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line">    <span class="comment"># visitors count</span></span><br><span class="line">    <span class="attr">counter:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p>以更改counter的值为false来隐藏页脚的访问量统计，然后，我们在<code>themes/next/layout/_partial/footer.swig</code>中添加以下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if theme.footer.counter %&#125;</span><br><span class="line">    &lt;script async src&#x3D;&quot;&#x2F;&#x2F;busuanzi.ibruce.info&#x2F;busuanzi&#x2F;2.3&#x2F;busuanzi.pure.mini.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;busuanzi_container_site_pv&quot;&gt;本站总访问量&lt;span id&#x3D;&quot;busuanzi_value_site_pv&quot;&gt;&lt;&#x2F;span&gt;次&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span class&#x3D;&quot;post-meta-divider&quot;&gt;|&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span id&#x3D;&quot;busuanzi_container_site_uv&quot;&gt;本站访客数&lt;span id&#x3D;&quot;busuanzi_value_site_uv&quot;&gt;&lt;&#x2F;span&gt;人&lt;&#x2F;span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><strong>设置社交链接</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/Qin-K</span> <span class="string">||</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:qinkkai@foxmail.com</span> <span class="string">||</span> <span class="string">envelope</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/wqinkai</span> <span class="string">||</span> <span class="string">weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || facebook</span></span><br><span class="line">  <span class="comment">#VK Group: https://vk.com/yourname || vk</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || skype</span></span><br></pre></td></tr></table></figure><p><strong>修改文章内容宽度</strong></p><p>修改主题目录下<code>source/css/_schemes/Picses/_layout.styl</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">$white_max_width = 1200px</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span>&#123; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: $white_max_width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">header</span><span class="selector-class">.post-header</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">90%</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: $white_max_width;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123; <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">260px</span>); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.header</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: <span class="selector-tag">auto</span> !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: <span class="selector-tag">auto</span> !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    <span class="attribute">width</span>: auto <span class="meta">!important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content-wrap</span> &#123;</span><br><span class="line">  +tablet() &#123;</span><br><span class="line">    <span class="selector-tag">width</span>: 100% !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  +<span class="selector-tag">mobile</span>() &#123;</span><br><span class="line">    // 为了在手机访问时，内边距不至于太大</span><br><span class="line">    <span class="selector-tag">padding</span>: 0 !<span class="selector-tag">important</span>;</span><br><span class="line">    <span class="selector-tag">width</span>: 100% !<span class="selector-tag">important</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="文章相关配置"><a href="#文章相关配置" class="headerlink" title="文章相关配置"></a>文章相关配置</h3><p><strong>修改文章部分显示</strong></p><p>对于未显示部分，点击阅读全文可以查看</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span></span><br></pre></td></tr></table></figure><p><strong>修改文章模板</strong></p><p>修改<code>source/scaffolds/post.md</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">tags:</span> </span><br><span class="line"><span class="attr">categories:</span> </span><br><span class="line"><span class="attr">description:</span> </span><br></pre></td></tr></table></figure><p><strong>添加字数统计、阅读时长</strong></p><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure><p>修改项目配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>添加来必应评论</strong></p><p>去<a href="https://www.livere.com/">来必应官网</a>注册，获取data-uid</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190830154138.png"/><p>修改主题配置文件填写自己的uid</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">livere_uid: MTAyMC8...Mi8xMzM4OA</span><br></pre></td></tr></table></figure><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>首先注册一个github账号，并创建一个名为&lt;youname&gt;.github.io的仓库。如我的个人仓库:<code>qin-k.github.io</code></p><p><strong>安装hexo-deployer-git插件</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p><strong>网站配置git</strong></p><p>在网站配置文件中配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: &lt;repository url&gt;</span><br><span class="line">  branch: [branch]</span><br></pre></td></tr></table></figure><ul><li><p>repo: 仓库地址</p></li><li><p>branch: 分支</p></li><li><p>部署</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><h2 id="hexo常用命令"><a href="#hexo常用命令" class="headerlink" title="hexo常用命令"></a>hexo常用命令</h2><table><thead><tr><th>命令</th><th>解释</th></tr></thead><tbody><tr><td>hexo clean</td><td>清除缓存,会清除public目录下文件,修改配置后使用</td></tr><tr><td>hexo g</td><td>生成静态网页，将md文件转成html, 放到public目录</td></tr><tr><td>hexo s</td><td>启动服务器，可在本地通过localhost:4000预览</td></tr><tr><td>hexo d</td><td>部署到github上</td></tr><tr><td>hexo d -g</td><td>生成并部署</td></tr><tr><td>hexo new “postName”</td><td>新建文章</td></tr><tr><td>hexo new “pageName”</td><td>新建页面</td></tr></tbody></table>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JAVA简单使用JDBC</title>
      <link href="/2019/08/30/JAVA%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8JDBC/"/>
      <url>/2019/08/30/JAVA%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8JDBC/</url>
      <content type="html"><![CDATA[<p>jdbc的定义</p><blockquote><p>JDBC（Java DataBase Connectivity,java数据库连接）是一种用于执行SQL语句的Java API，可以为多种关系数据库提供统一访问，它由一组用Java语言编写的类和接口组成。JDBC提供了一种基准，据此可以构建更高级的工具和接口，使数据库开发人员能够编写数据库应用程序</p></blockquote><a id="more"></a><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><ul><li>jdk 1.8</li><li>mysql-5.7.23-winx64</li><li>mysql-connector-java-5.1.7-bin.jar</li></ul><h2 id="使用jdbc的基本步骤"><a href="#使用jdbc的基本步骤" class="headerlink" title="使用jdbc的基本步骤"></a>使用jdbc的基本步骤</h2><ol><li><p>注册驱动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立数据库连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Connection conn = DriverManager.getConnection(url, username, password);</span><br></pre></td></tr></table></figure></li><li><p>创建Statement(PrepareStatement)对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PrepareStatement ps = conn.prepareStatement(sql);</span><br></pre></td></tr></table></figure></li><li><p>执行sql语句得到ResultSet结果集</p><p><em>PrepareStatement基本使用</em></p><ul><li>executeQuery()     <em>查询</em></li><li>executeUptate()  <em>增删改</em></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ResultSet rs = ps.executeQuery();</span><br></pre></td></tr></table></figure></li><li><p>遍历结果集</p><p><em>ResultSet获取结果</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (rs.next()) &#123;<span class="comment">/*获取结果*/</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>释放资源 <em>释放资源时的顺序 ResultSet-&gt;PrepareStatement-&gt;Connection</em></p></li></ol><h2 id="简单JDBC实例"><a href="#简单JDBC实例" class="headerlink" title="简单JDBC实例"></a>简单JDBC实例</h2><p>首先，创建一个工具类，用于获取连接对象，和释放资源。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取Connection对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>); <span class="comment">// 加载数据库驱动</span></span><br><span class="line">        conn = DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/jdbctest&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;admin&quot;</span>); <span class="comment">// 建立数据库连接</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放资源</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">release</span><span class="params">(Connection conn, Statement st, ResultSet rs)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</span><br><span class="line">            rs.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (st != <span class="keyword">null</span>) &#123;</span><br><span class="line">            st.close();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>准备表格</p><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g47g9tyti8j30e703ha9w.jpg"/></li></ul><h3 id="insert-增加"><a href="#insert-增加" class="headerlink" title="insert 增加"></a>insert 增加</h3><p>向表中插入两条数据, qinkai 20, zhangsan 20, id根据表中自增长。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = JDBCUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;insert into student values(null,?,?)&quot;</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>,<span class="string">&quot;qinkai&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">2</span>,  <span class="number">20</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCUtil.release(<span class="keyword">null</span>, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>插入成功表中数据</p><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g47gamgxlhj30e8037q2t.jpg"/><h3 id="query-查询"><a href="#query-查询" class="headerlink" title="query 查询"></a>query 查询</h3><p>查询表所有数据，并打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = JDBCUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;select * from student&quot;</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    ResultSet rs = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        rs = ps.executeQuery();</span><br><span class="line">        <span class="keyword">while</span>(rs.next()) &#123;</span><br><span class="line">            <span class="keyword">int</span> id = rs.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            String name = rs.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> age = rs.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">            System.out.println(id + <span class="string">&quot; &quot;</span> +  <span class="string">&quot; &quot;</span> + name + <span class="string">&quot; &quot;</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCUtil.release(rs, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台结果显示</p><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g47gb0ffk4j30he03sdfs.jpg"/><h3 id="update-修改"><a href="#update-修改" class="headerlink" title="update 修改"></a>update 修改</h3><p>通过id修改id为4的姓名为lisi，修改完成后查询。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = JDBCUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;update student set name=? where id =?&quot;</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        ps.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line">        query();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCUtil.release(<span class="keyword">null</span>, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后，查询控制台显示</p><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g47gbe8q5jj30h703w0so.jpg"/><h3 id="delete-删除"><a href="#delete-删除" class="headerlink" title="delete 删除"></a>delete 删除</h3><p>通过name条件删除lisi的数据，删除后查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Connection conn = JDBCUtil.getConnection();</span><br><span class="line">    String sql = <span class="string">&quot;delete from student where name=?&quot;</span>;</span><br><span class="line">    PreparedStatement ps = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ps = conn.prepareStatement(sql);</span><br><span class="line">        ps.setString(<span class="number">1</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        ps.executeUpdate();</span><br><span class="line"></span><br><span class="line">        query();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        JDBCUtil.release(<span class="keyword">null</span>, ps, conn);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>删除后，控制台显示结果。</p><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g47gdf8moyj30gh03d747.jpg"/>]]></content>
      
      <categories>
          
          <category> javaEE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> jdbc </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>mybatis-generator插件的使用</title>
      <link href="/2019/08/26/mybatis-generator%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/08/26/mybatis-generator%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p>MyBatis Generator 是 MyBatis 提供的一个代码生成工具。可以帮我们生成 表对应的持久化对象(po)、操作数据库的接口(dao)、CRUD sql的xml(mapper)。</p><p>MyBatis Generator 是一个独立工具，你可以下载它的jar包来运行、也可以在 Ant 和 maven 运行。</p><a id="more"></a><h2 id="在pom-xml中引入插件"><a href="#在pom-xml中引入插件" class="headerlink" title="在pom.xml中引入插件"></a><strong>在pom.xml中引入插件</strong></h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-generator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  用maven mybatis插件</span></span><br><span class="line"><span class="comment">  如果不在plugin里面添加依赖包得引用的话，会找不到相关得jar包，</span></span><br><span class="line"><span class="comment">  在plugin外部得jar包，他不会去找到并执行，</span></span><br><span class="line"><span class="comment">  所以要把plugin运行依赖得jar配置都放在里面</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="添加generatorConfig-xml文件"><a href="#添加generatorConfig-xml文件" class="headerlink" title="添加generatorConfig.xml文件"></a>添加generatorConfig.xml文件</h2><p>在resources目录下添加generatorConfig.xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- context 是逆向工程的主要配置信息 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id：起个名字 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- targetRuntime：设置生成的文件适用于那个 mybatis 版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- optional，旨在创建class时，对注释进行控制 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressDate&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jdbc的数据库连接--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--这里是以变量的形式定义，具体的值在 application.properties 文件中--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jdbc:mysql://localhost:3306/数据库名?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">password</span>=<span class="string">&quot;admin&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--MySQL 不支持 schema 或者 catalog 所以需要添加这个--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--参考 : http://www.mybatis.org/generator/usage/mysql.html--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage：生成的实体类所在的包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- targetProject：生成的实体类所在的硬盘位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- DataObject 类存放位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.model&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否允许子包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否对modal添加构造函数 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;constructorBased&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否清理从数据库中查询出的字符串左右两边的空白字符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 建立modal对象是否不可改变 即生成的modal对象不会有setter方法，只有构造方法 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;immutable&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage 和 targetProject：生成的 mapper 文件的包和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetPackage</span>=<span class="string">&quot;mapper&quot;</span></span></span><br><span class="line"><span class="tag">                         <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\resources&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 针对数据库的一个配置，是否把 schema 作为字包名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- targetPackage 和 targetProject：生成的 interface 文件的包和位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span></span></span><br><span class="line"><span class="tag">                             <span class="attr">targetPackage</span>=<span class="string">&quot;com.example.mapper&quot;</span> <span class="attr">targetProject</span>=<span class="string">&quot;.\src\main\java&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 针对 oracle 数据库的一个配置，是否把 schema 作为字包名 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--生成对应表及类名 并不生成Example--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;User&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user_company&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;UserCompany&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;pub_parameter&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;PubParameter&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;funds_record&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;FundsRecord&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;company_extension&quot;</span> <span class="attr">domainObjectName</span>=<span class="string">&quot;CompanyExtension&quot;</span> <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="运行插件"><a href="#运行插件" class="headerlink" title="运行插件"></a><strong>运行插件</strong></h2><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904143558.png"/><p><strong>最终项目结构</strong></p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904143631.png"/><h2 id="常见的坑说明"><a href="#常见的坑说明" class="headerlink" title="常见的坑说明"></a>常见的坑说明</h2><p><strong>MyBatis Generator 生成器把其他数据库的同名表生成下来的问题</strong></p><p>​        </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MyBatis Generator : Table Configuration scheme.table matched more than one table</span><br></pre></td></tr></table></figure><p>在生成器的配置文件里的数据库连接地址中添加下列参数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nullCatalogMeansCurrent&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/security&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL 8.x 需要指定服务器的时区--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;serverTimezone&quot;</span> <span class="attr">value</span>=<span class="string">&quot;UTC&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--MySQL 不支持 schema 或者 catalog 所以需要添加这个--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--参考 : http://www.mybatis.org/generator/usage/mysql.html--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;nullCatalogMeansCurrent&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Exception getting JDBC Driver: com.mysql.jdbc.Driver</strong></p><p>用maven mybatis插件，如果不在plugin里面添加依赖包得引用的话，会找不到相关得jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- mybatis-generator --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">  用maven mybatis插件</span></span><br><span class="line"><span class="comment">  如果不在plugin里面添加依赖包得引用的话，会找不到相关得jar包，</span></span><br><span class="line"><span class="comment">  在plugin外部得jar包，他不会去找到并执行，</span></span><br><span class="line"><span class="comment">  所以要把plugin运行依赖得jar配置都放在里面</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>mybaties generator 驼峰配置</strong></p><p>修改表格部分如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;user_info&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableCountByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableUpdateByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">enableDeleteByExample</span>=<span class="string">&quot;false&quot;</span> <span class="attr">enableSelectByExample</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">selectByExampleQueryId</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;useActualColumnNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--true：MyBatis Generator会使用数据库中实际的字段名字作为生成的实体类的属性名。</span></span><br><span class="line"><span class="comment">        　　false：这是默认值。如果设置为false,则MyBatis Generator会将数据库中实际的字段名字转换为Camel Case风格作为生成的实体类的属性名。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>jenkins入门介绍, 常见应用集成</title>
      <link href="/2019/07/08/jenkins%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D-%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E9%9B%86%E6%88%90/"/>
      <url>/2019/07/08/jenkins%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D-%E5%B8%B8%E8%A7%81%E5%BA%94%E7%94%A8%E9%9B%86%E6%88%90/</url>
      <content type="html"><![CDATA[<h2 id="什么是Jenkins"><a href="#什么是Jenkins" class="headerlink" title="什么是Jenkins"></a>什么是Jenkins</h2><ul><li>Jenkins是一个开源持续集成工具</li><li>开发工具：JAVA</li><li>功能：提供了软件开发的持续集成服务</li><li>特点：支持主流软件配置管理，配合实现软件配置管理，持续集成功能。</li></ul><a id="more"></a><h2 id="Jenkins的优势和应用场景"><a href="#Jenkins的优势和应用场景" class="headerlink" title="Jenkins的优势和应用场景"></a>Jenkins的优势和应用场景</h2><ul><li>主流的运维开发平台，兼容所有主流开发环境</li><li>插件市场可与海量业内主流开发工具实现集成</li><li>Job为配置单位与日志管理，是运维与开发人员能协调工作</li><li>权限管理划分不同Job不同角色</li><li>强大的负载均衡功能，保证我们项目的可靠性</li></ul><h2 id="Jenkins安装配置管理"><a href="#Jenkins安装配置管理" class="headerlink" title="Jenkins安装配置管理"></a>Jenkins安装配置管理</h2><h3 id="安装Jenkins前的环境准备-CentOS7"><a href="#安装Jenkins前的环境准备-CentOS7" class="headerlink" title="安装Jenkins前的环境准备(CentOS7)"></a>安装Jenkins前的环境准备(CentOS7)</h3><ol><li><p>添加yum仓库源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br></pre></td></tr></table></figure></li><li><p>保证系统JAVA版本为8.0或8.0以上</p></li><li><p>关闭防火墙</p></li><li><p>关闭SELINUX并重启系统</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;sysconfig&#x2F;selinux</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">SELINUX&#x3D;disabled</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>查看是否禁用成功：getenforce</p></li></ol><h3 id="Jenkins安装与初始化配置"><a href="#Jenkins安装与初始化配置" class="headerlink" title="Jenkins安装与初始化配置"></a>Jenkins安装与初始化配置</h3><ol><li><p>Yum源安装Jenkins最新版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure></li><li><p>创建Jenkins系统用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd deploy</span><br></pre></td></tr></table></figure></li><li><p>更改Jenkins启动用户与端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/jenkins</span><br><span class="line">...</span><br><span class="line">JENKINS_USER=deploy</span><br><span class="line">JENKINS_PORT=8080</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>设置Jenkins家目录和日志目录所属组和人</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown -R deploy:deploy /var/lib/jenkins</span><br><span class="line">chown -R deploy:deploy /var/log/jenkins</span><br></pre></td></tr></table></figure></li><li><p>启动Jenkins</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure></li><li><p>查看jenkins启动是否成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:8080</span><br></pre></td></tr></table></figure><img src="https://ws1.sinaimg.cn/large/006Cx571gy1g51m908a1ej30lz01st8l.jpg"/><p>在浏览器中访问配置的端口,会进入如下界面</p><p>在<code>/var/lib/jenkins/secrets/initialAdminPassword</code>查看密码。</p><p>首次登录的时候需要下载一些插件，可以使推荐的插件，也可以自己选择下载。</p><p>自动进入管理账户注册页面，注册好了，进入登录页面。</p></li></ol><h2 id="Jenkins-Job构建"><a href="#Jenkins-Job构建" class="headerlink" title="Jenkins Job构建"></a>Jenkins Job构建</h2><ul><li>代表一个任务或者项目</li><li>可配置与可执行</li><li>执行后的记录称之为Build</li><li>日志监控与记录</li><li>所有文件集中保存</li></ul><h3 id="Freestyle-Job"><a href="#Freestyle-Job" class="headerlink" title="Freestyle Job"></a>Freestyle Job</h3><ol><li>需在页面添加模块配置项与参数完成配置</li><li>每个Job仅能实现一个开发功能</li><li>无法将配置代码化，不利于Job配置迁移与版本控制：Job迁移复杂，没有记录。</li><li>逻辑相对简单，无需额外学习成本</li></ol><h3 id="Pipeline-Job"><a href="#Pipeline-Job" class="headerlink" title="Pipeline Job"></a>Pipeline Job</h3><ul><li>匹配持续集成与持续交付的概念<ul><li>CI持续集成: 代码仓库与Jenkins结合，代码的每次提交都会自动构建。</li><li>CD持续交付：将构建好的软件版本，持续交付到用户受众。</li></ul></li></ul><ol><li>所有模块，参数配合都可以体现为一个pipeline脚本</li><li>可以定义多个stage构建一个管道工作集</li><li>所有配置代码化，方便Job配置迁移与版本控制</li><li>需要pipeline脚本语法基础</li></ol><h3 id="Jenkins-Job构建配置"><a href="#Jenkins-Job构建配置" class="headerlink" title="Jenkins Job构建配置"></a>Jenkins Job构建配置</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li><p>配置Jenkins server本地Gitlab DNS</p></li><li><p>安装git client, curl 工具依赖</p></li><li><p>关闭系统Git http.sslVerify安全认证</p></li><li><p>添加Jenkins后台 Git client usr与email</p><p>系统管理 –&gt; 系统设置 –&gt; 系统设置 –&gt;Git plugin</p></li><li><p>添加Jenkins后台 Git Credential凭据</p><p>凭据  </p></li></ol><h4 id="构建配置"><a href="#构建配置" class="headerlink" title="构建配置"></a>构建配置</h4><ol><li><p>创建一个Freestyle project（自由风格）</p></li><li><p>编辑描述信息</p></li><li><p>参数配置</p><ul><li>选项参数: 如选择环境dev prod</li><li>文本配置: version</li></ul></li><li><p>源代码管理</p><ul><li><p>源代码管理：git</p><p>Repository URL, Credentials</p></li></ul></li><li><p>Build配置</p><ul><li>构建， 执行shell</li></ul></li></ol><h3 id="Jenkins-Pipeline-Job构建配置"><a href="#Jenkins-Pipeline-Job构建配置" class="headerlink" title="Jenkins Pipeline Job构建配置"></a>Jenkins Pipeline Job构建配置</h3><h4 id="Jenkins-Pipeline-Job编写规范"><a href="#Jenkins-Pipeline-Job编写规范" class="headerlink" title="Jenkins Pipeline Job编写规范"></a>Jenkins Pipeline Job编写规范</h4><p>pipeline 基础架构</p><ul><li>所有代码包裹在pipeline{}层内</li><li>stages{}层用来包含该pipeline所有stage子层</li><li>stage{}层用来包含具体我们需要编写任务的steps{}子层</li><li>steps{}层用来添加我们具体需要调用的模块语句</li></ul><p>agent区域</p><ul><li><p>agent定义pipeline在哪里运行<br>可以使用any，none，或具体的Jenkins node主机名等。</p><p>例如：特指在node1上执行 agent {node {label ‘node1’}}</p></li></ul><p>environment区域</p><ul><li>变量名称=变量值“定义我们的环境变量”</li><li>可以定义全局环境变量，应用所有stages任务</li><li>可以定义stage环境变量，应用单独的stage任务</li></ul><p>script区域(可选)</p><ul><li>在steps内定义script{}</li><li>groovy脚本语言</li><li>用来进行脚本逻辑运算</li></ul><p>常用steps区域</p><ul><li>echo：打印输出</li><li>sh：调用Linux系统shell命令</li><li>git url: 调用git模块进行git相关操作</li></ul><p>parameters选项参数</p><ul><li>choice(choices, description, name) 选项参数</li><li>string(name, defalutValue, description) 文本参数</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">pipeline&#123;</span><br><span class="line">    agent any</span><br><span class="line">    environment&#123;</span><br><span class="line">    PATH=&quot;/bin:/sbin:/usr/bin:/usr/sbin&quot;</span><br><span class="line">        host=&#x27;test.example.com&#x27;</span><br><span class="line">        user=&#x27;deploy&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    stages&#123;</span><br><span class="line">        stage(&#x27;build&#x27;) &#123;</span><br><span class="line">            enviroment&#123;</span><br><span class="line">                JAVA_HOME=&quot;usr/local/java&quot;</span><br><span class="line">            &#125;</span><br><span class="line">            steps&#123;</span><br><span class="line">                sh &quot;cat $host&quot;</span><br><span class="line">                echo $deploy</span><br><span class="line">                </span><br><span class="line">                script&#123;</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Jenkins-Pipeline-Job构建配置-1"><a href="#Jenkins-Pipeline-Job构建配置-1" class="headerlink" title="Jenkins Pipeline Job构建配置"></a>Jenkins Pipeline Job构建配置</h4><ol><li><p>创建一个Pipeline project（流水线）</p></li><li><p>编辑描述信息</p></li><li><p>编写Pipeline脚本</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">#!groovy</span><br><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">agent &#123;node &#123;label &#x27;master&#x27;&#125;&#125;</span><br><span class="line"></span><br><span class="line">environment &#123;</span><br><span class="line">PATH=&quot;/bin:/sbin:/usr/bin:/usr/sbin:usr/local/bin&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">parameters&#123;</span><br><span class="line">choice(</span><br><span class="line">choices: &#x27;dev\nprod&#x27;,</span><br><span class="line">description: &#x27;choose deploy environment&#x27;,</span><br><span class="line">name: &#x27;deploy_env&#x27;</span><br><span class="line">)</span><br><span class="line">string (name: &#x27;version&#x27;, defaultValue: &#x27;1.0.0&#x27;, description: &#x27;build version&#x27;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stages &#123;</span><br><span class="line"></span><br><span class="line">stage(&quot;Checkout test repo&quot;) &#123;</span><br><span class="line">steps&#123;</span><br><span class="line">sh &#x27;git config --global http.sslVerify false&#x27;</span><br><span class="line">dir (&quot;$&#123;env.WORKSPACe&#125;&quot;) &#123;</span><br><span class="line">git branch: &#x27;master&#x27;, url: &#x27;ssh://git@git.idwzx.com:7999/deo/qinkai.git&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">stage(&quot;Print env variable&quot;) &#123;</span><br><span class="line">steps &#123;</span><br><span class="line">dir (&quot;$&#123;env.WORKSPACe&#125;&quot;) &#123;</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">echo &quot;[INFO] print env variable&quot;</span><br><span class="line">echo &quot;current deployment environment is $deploy_env&quot; &gt;&gt; test.properties</span><br><span class="line">echo &quot;The build is $version&quot; &gt;&gt; test.properties</span><br><span class="line">echo &quot;[INFO] Done...&quot;</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">stage(&quot;Check test properties&quot;) &#123;</span><br><span class="line">steps&#123;</span><br><span class="line">dir (&quot;$&#123;env.WORKSPACe&#125;&quot;) &#123;</span><br><span class="line">sh &quot;&quot;&quot;</span><br><span class="line">echo &quot;[INFO] Check test properties&quot;</span><br><span class="line">if [ -s test.properties]</span><br><span class="line">then</span><br><span class="line">cat test.properties</span><br><span class="line">echo &quot;[INFO] Done...&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;test.properties is empty&quot;</span><br><span class="line">fi</span><br><span class="line"><span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">echo &quot;[INFO] Build finished...&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Jenkins应用"><a href="#Jenkins应用" class="headerlink" title="Jenkins应用"></a>Jenkins应用</h3><ul><li>Jenkins Linux shell集成<ul><li>构建 -&gt; 增加构建步骤 -&gt; 执行shell</li></ul></li><li>Jenkins参数集成<ul><li>general - &gt; 参数化构建过程</li></ul></li><li>Jenkins git 集成<ul><li>Global Tool Configuration-&gt; git (配置Git)</li><li>管理Jenkins-&gt; 系统管理 -&gt; git plugin -&gt; 添加name和email</li><li>凭据中添加global凭据，输入用户名和密码</li><li>源码管理 - &gt; git 添加url、选择凭据</li></ul></li><li>Jenkins maven集成<ul><li>Global Tool Configuration-&gt; maven (配置maven)</li><li>构建-&gt;增加构建步骤-&gt;选择maven版本，调用Maven顶层目标(package)打包</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>廖雪峰git学习记录</title>
      <link href="/2019/07/07/%E5%BB%96%E9%9B%AA%E5%B3%B0git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/07/07/%E5%BB%96%E9%9B%AA%E5%B3%B0git%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<p>这篇博客，主要是记录自己通过<a href="https://www.liaoxuefeng.com/wiki/896043488029600">廖雪峰老师网站</a>学习Git的笔记。</p><h2 id="Git是什么"><a href="#Git是什么" class="headerlink" title="Git是什么"></a>Git是什么</h2><p>Git是目前世界上最先进的分布式版本控制系统（没有之一）</p><h2 id="集中式和分布式"><a href="#集中式和分布式" class="headerlink" title="集中式和分布式"></a>集中式和分布式</h2><h3 id="集中式-CVS-SVN"><a href="#集中式-CVS-SVN" class="headerlink" title="集中式(CVS SVN)"></a>集中式(CVS SVN)</h3><p>版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器。</p><p>集中式版本控制系统最大的毛病就是必须联网才能工作。</p><h3 id="分布式-Git"><a href="#分布式-Git" class="headerlink" title="分布式(Git)"></a>分布式(Git)</h3><p>分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库。</p><p>分布式版本控制系统通常也有一台充当“中央服务器”的电脑，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它大家也一样干活，只是交换修改不方便而已。</p><a id="more"></a><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><ul><li><p>linux</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install git</span><br></pre></td></tr></table></figure></li><li><p>windows</p><p>git官网<a href="https://git-scm.com/downloads">git下载</a></p></li></ul><p>安装完成后配置名字和Email地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">&quot;Your Name&quot;</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">&quot;email@example.com&quot;</span></span></span><br></pre></td></tr></table></figure><h2 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h2><p>版本库又名仓库，英文名<strong>repository</strong>，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p><ol><li>创建空目录</li><li>使用git init将目录变为Git可以管理的仓库。初始化完成为生成<code>.git</code>目录</li></ol><p><strong>将文件添加到版本库</strong></p><ol><li><p>用<code>git add</code>命令告诉Git，把文件添加到仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add [filename]</span><br></pre></td></tr></table></figure></li><li><p>用<code>git commit</code>命令，将文件提交到仓库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m [message]</span><br></pre></td></tr></table></figure></li></ol><h2 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h2><p>Git中通过每次commit保存不同的版本，通过每一个commit版本进行恢复。</p><h3 id="查看历史记录"><a href="#查看历史记录" class="headerlink" title="查看历史记录"></a>查看历史记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p>现在有test01，test02，test03三个版本。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161104.png"/><p>只显示一行:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161126.png"/><ul><li>那一串黄色的字符代表的是 <code>commit id</code>，是一个SHA1计算出来的一个非常大的数字，用十六进制表示。</li><li>每提交一个新版本，实际上Git就会把它们自动串成一条时间线。</li><li>在Git中用<code>HEAD</code>表示当前版本，也就是最新的提交<code>commit id</code><br>上一个版本<code>HEAD^</code> 上上个版本<code>HEAD^^</code>, 前100个版本<code>HEAD~100</code></li></ul><h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>Git的版本回退速度非常快，因为Git在内部有个指向当前版本的<code>HEAD</code>指针，当你回退版本的时候，Git仅仅是把HEAD从指向<code>test03</code>改为指向<code>test02</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   └──&gt; ○ test03</span><br><span class="line">        │</span><br><span class="line">        ○ test02</span><br><span class="line">        │</span><br><span class="line">        ○ test01</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">┌────┐</span><br><span class="line">│HEAD│</span><br><span class="line">└────┘</span><br><span class="line">   │</span><br><span class="line">   │    ○ test03</span><br><span class="line">   │    │</span><br><span class="line">   └──&gt; ○ test02</span><br><span class="line">        │</span><br><span class="line">        ○ test01</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard &lt;commit id&gt;</span><br></pre></td></tr></table></figure><p>从当前版本test03回退到test02</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard HEAD^</span></span><br><span class="line">HEAD is now at 6eeb0dc test02</span><br></pre></td></tr></table></figure><p>查看当前readme内容。可以看到确实回退到了test02</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat readme.txt</span></span><br><span class="line">test01</span><br><span class="line">test02</span><br></pre></td></tr></table></figure><p>通过<code>commit id</code>及SHA1那一串数字穿梭任意版本。重新回到test03.<br>commit id不用写完整，能唯一标识就行，Git会自动查找。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset --hard 9a9f</span></span><br><span class="line">HEAD is now at 9a9ff40 test03</span><br></pre></td></tr></table></figure><h3 id="查看命令历史"><a href="#查看命令历史" class="headerlink" title="查看命令历史"></a>查看命令历史</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161151.png"/><p>可以查看命令历史以及对应的commit id，然后通过commit id进行版本回退。</p><h2 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h2><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161209.png"/><h3 id="工作区"><a href="#工作区" class="headerlink" title="工作区"></a>工作区</h3><p>就是你在电脑里能看到的目录。</p><h3 id="版本库（Repository）"><a href="#版本库（Repository）" class="headerlink" title="版本库（Repository）"></a>版本库（Repository）</h3><p>工作区有一个隐藏目录<code>.git</code>，这个不算工作区，而是Git的版本库。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支<code>master</code>，以及指向<code>master</code>的一个指针叫<code>HEAD</code>。</p><p>我们把文件往Git版本库里添加，分两步。</p><ol><li><code>git add</code>把文件修改添加到暂存区。</li><li><code>git commit</code>提交更改，把暂存区所有内容提交到当前分支。</li></ol><p>需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><p>修改readme.txt中的内容。创建一个新文件LICENSE使用git status。    <code>readme.txt</code>被修改，<code>LICENSE</code>从来没有被添加过，状态时<code>Untracked</code>。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161228.png"/><p>使用<code>git add</code>将两个文件都添加到暂存区。再使用<code>git status</code>查看</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161246.png"/><p>现在暂存区的状态</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161300.png"/><p><code>git add</code>命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行<code>git commit</code>就可以一次性把暂存区的所有修改提交到分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;修改readme 添加LICENSE&quot;</span></span></span><br><span class="line">[master fc4287e] 修改readme 添加LICENSE</span><br><span class="line"> 2 files changed, 2 insertions(+), 1 deletion(-)</span><br><span class="line"> create mode 100644 LICENSE</span><br></pre></td></tr></table></figure><p>使用<code>git staus查看</code>没有对工作区做任何修改，那么工作区就是“干净”的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>最后暂存区的状态</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161317.png"/><h3 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h3><p>Git跟踪并管理的是修改，而非文件。</p><p>第一次修改 -&gt; <code>git add</code> -&gt; 第二次修改 -&gt; <code>git commit</code></p><p>Git管理的是修改，当你用<code>git add</code>命令后，在工作区的第一次修改被放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，<code>git commit</code>只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161330.png"/><p>要想提交第二次修改，继续<code>git add</code>然后<code>git commit</code>。可以不急着<code>add</code>第一次修改，等两次修改后在一起<code>git commit</code>: 第一次修改-&gt;<code>git add</code> -&gt; 第二次修改 -&gt; <code>git add</code> -&gt; <code>git commit</code>。</p><p>每次修改，如果不用<code>git add</code>到暂存区，那就不会加入到<code>commit</code>中。</p><h4 id="查看修改"><a href="#查看修改" class="headerlink" title="查看修改"></a>查看修改</h4><p>可以通过使用git diff。</p><ul><li>git diff 比较的是工作区文件与暂存区文件的区别（上次git add 的内容）</li><li>git diff –cached 比较的是暂存区的文件与仓库分支里（上次git commit 后的内容）的区别 </li></ul><h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><h4 id="checkout"><a href="#checkout" class="headerlink" title="checkout"></a>checkout</h4><p>当修改了文件，但是还没有<code>git add</code>到暂存区，使用<code>git status</code>查看，会提示使用<code>git checkout -- &lt;file&gt;</code>进行撤销修改。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在Git中可以使用<code>git checkout -- file</code>可以丢弃工作区的修改：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -- readme.txt</span><br></pre></td></tr></table></figure><p>命令<code>git checkout -- readme.txt</code>意思就是，把<code>readme.txt</code>文件在工作区的修改全部撤销，这里有两种情况：</p><ol><li><code>readme.txt</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</li><li><code>readme.txt</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</li></ol><p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p><h4 id="reset"><a href="#reset" class="headerlink" title="reset"></a>reset</h4><p>当修改已经<code>git add</code>到暂存区。但还没有提交时，会提示使用<code>git reset HEAD &lt;file&gt;...</code> 进行撤销。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes to be committed:</span><br><span class="line">  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)</span><br><span class="line"></span><br><span class="line">        modified:   readme.txt</span><br></pre></td></tr></table></figure><p><code>git reset</code>命令既可以回退版本，也可以把<em>暂存区的修改回退到工作区。</em>当我们用<code>HEAD</code>时，表示最新的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git reset HEAD readme.txt</span></span><br><span class="line">Unstaged changes after reset:</span><br><span class="line">M       readme.txt</span><br></pre></td></tr></table></figure><p>然后再使用<code>checkout</code>进行撤销文件修改。</p><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD &lt;file&gt;</code>，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，使用<code>git reset --hard &lt;commit id&gt;</code>不过前提是没有推送到远程库。</p><h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>删除也是一个修改操作，当使用<code>rm &lt;file&gt;...</code>删除一个文件，使用<code>git staus</code>查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch master</span><br><span class="line">Changes not staged for commit:</span><br><span class="line">  (use &quot;git add/rm &lt;file&gt;...&quot; to update what will be committed)</span><br><span class="line">  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)</span><br><span class="line"></span><br><span class="line">        deleted:    test.txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</span><br></pre></td></tr></table></figure><p>Git会提示做了修改，现在又两种情况进行选择。</p><ol><li><p>确实要从版本库中删除该文件，那就用命令<code>git rm</code>删掉，并且<code>git commit</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rm test.txt</span></span><br><span class="line">rm &#x27;test.txt&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git commit -m <span class="string">&quot;删除test.txt&quot;</span></span></span><br><span class="line">[master c61c0eb] 删除test.txt</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br><span class="line"> delete mode 100644 test.txt</span><br></pre></td></tr></table></figure></li><li><p>删错了，因为版本库里还有呢，所以可以很轻松地把误删的文件恢复到最新版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -- test.txt</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h2><ul><li><p>创建SSH Key，输入下面命令，一路回车。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span></span><br></pre></td></tr></table></figure></li></ul><p>在~/.ssh下会生成<code>id_rsa</code>(私钥)和<code>id_rsa.pub</code>(公钥)这两个文件。</p><ul><li>在GitHub上添加SSH Key。将公钥中的内容添加。</li></ul><h3 id="添加远程仓库"><a href="#添加远程仓库" class="headerlink" title="添加远程仓库"></a>添加远程仓库</h3><p>先有本地库，后有远程库的时候，如何关联远程库。</p><p>在Github上创建一个仓库，名字叫test。</p><ul><li><p>在本地仓库添加远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote add origin git@github.com:Qin-K/test.git</span></span><br></pre></td></tr></table></figure></li><li><p>将本地仓库的内容推送到远程仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push -u origin master</span></span><br></pre></td></tr></table></figure></li></ul><p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。在以后的推送中只需要使用:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure><h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><p>从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。</p><p>在远程仓库新建仓库，勾选<code>Initialize this repository with a README</code>，这样GitHub会自动为我们创建一个<code>README.md</code>文件。</p><p>用<code>git clone</code>命令从远程仓库克隆。git clone ‘仓库地址’。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> git@github.com:Qin-K/test.git</span></span><br></pre></td></tr></table></figure><p>Git支持多种协议，默认的<code>git://</code>使用ssh，但也可以使用<code>https</code>等其他协议。使用<code>https</code>除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令</p><ul><li>ssh  <code>git@github.com:Qin-K/test.git</code></li><li>https: <code>https://github.com/Qin-K/test.git</code></li></ul><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h3><p>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即<code>master</code>分支。</p><p><code>HEAD</code>严格来说不是指向提交，而是指向<code>master</code>，<code>master</code>才是指向提交的，所以，<code>HEAD</code>指向的就是当前分支。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161356.png"/><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p><p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上：</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161413.png"/><p>创建一个<code>dev</code>分支，然后切换到<code>dev</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev</span></span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch dev <span class="comment"># 创建分支</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev <span class="comment"># 切换分支</span></span></span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br></pre></td></tr></table></figure><p>用<code>git branch</code>命令查看当前分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch</span></span><br><span class="line">* dev</span><br><span class="line">  master</span><br></pre></td></tr></table></figure><p><code>git branch</code>命令会列出所有分支，当前分支前面会标一个<code>*</code>号。</p><p>在当前<code>dev</code> 分支对readme.txt进行修改并且提交，然后切换到master分支。重新查看readme.txt中的内容，文件没有改变。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161425.png"/><p>把<code>dev</code>分支的工作成果合并到<code>master</code>分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge dev</span></span><br></pre></td></tr></table></figure><p><code>git merge</code>用于合并指定分支到当前分支。合并后，再查看<code>readme.txt</code>的内容，就可以看到，和<code>dev</code>分支的最新提交是完全一样的。</p><p>删除分支<code>dev</code>分支。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch -d dev</span></span><br></pre></td></tr></table></figure><p>因为创建、合并和删除分支非常快，所以Git鼓励你使用分支完成某个任务，合并后再删掉分支，这和直接在<code>master</code>分支上工作效果是一样的，但过程更安全。</p><h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>新建一个feature1分支，修改readme.txt最后一行，并添加提交。</p><p>切换到master分支，也修改readme.txt最后一行，添加并提交。<br>在master分支上试图合并会有冲突。</p><p>现在<code>master</code>和<code>feature1</code>各分别有新的提交，变成这样:</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161441.png"/><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge feature1</span></span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict in readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure><p>而且有方显示分支名为 ：(master|MERGING)</p><p>Git告诉我们，<code>readme.txt</code>文件存在冲突，必须手动解决冲突后再提交。<code>git status</code>也可以告诉我们冲突的文件：</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161457.png"/><p>查看readme.txt文件中的内容:</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">test01</span><br><span class="line">test02</span><br><span class="line">test0333344</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">创建一个新的分支 test</span><br><span class="line">=======</span><br><span class="line">创建一个新的分支test</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>Git用<code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;</code>，<code>=======</code>，<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code>标记出不同分支的内容。然后根据具体情况修改readme.txt中的内容，然后重新添加提交解决冲突。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161511.png"/><p>现在<code>master</code>分支和<code>feature1</code>分支变成了这样:</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161530.png"/><p>查看分支合并情况:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span></span><br></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161544.png"/><h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><h4 id="不使用Fast-forward"><a href="#不使用Fast-forward" class="headerlink" title="不使用Fast forward"></a>不使用Fast forward</h4><p>通常，合并分支时，如果可能，Git会用<code>Fast forward</code>模式，但这种模式下，删除分支后，会丢掉分支信息。</p><p>创建一个新分支<code>dev</code>在dev中修改readme.txt并且添加和提交，然后切换到master分支进行强制禁用<code>Fast forward</code>模式合并。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">&quot;merge with no-ff&quot;</span> dev</span></span><br><span class="line">Merge made by the &#x27;recursive&#x27; strategy.</span><br><span class="line"> readme.txt | 1 -</span><br><span class="line"> 1 file changed, 1 deletion(-)</span><br></pre></td></tr></table></figure><p>使用<code>git  log</code>查看分支历史。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161559.png"/><p>不是用<code>Fast forward</code>模式，merge之后:</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161611.png"/><h4 id="分支策略"><a href="#分支策略" class="headerlink" title="分支策略"></a>分支策略</h4><p>在实际开发中，我们应该按照几个基本原则进行分支管理：</p><p>首先，<code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p><p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p><p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p><p>所以，团队合作的分支看起来就像这样：</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161621.png"/><h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p><p>当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支<code>issue-101</code>来修复它，但是，等等，当前正在<code>dev</code>上进行的工作还没有提交。工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？</p><p>Git还提供了一个<code>stash</code>功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash</span></span><br></pre></td></tr></table></figure><p>用<code>git status</code>查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。</p><p>首先确定要在哪个分支上修复bug，假定需要在<code>master</code>分支上修复，就从<code>master</code>创建临时分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b issue-101</span></span><br></pre></td></tr></table></figure><p>修复完成后，切换到<code>master</code>分支，并完成合并，最后删除<code>issue-101</code>分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git merge --no-ff -m <span class="string">&quot;merged bug fix 101&quot;</span> issue-101</span></span><br></pre></td></tr></table></figure><p>Bug修复后切换到 <code>dev</code>分支干活。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout dev</span></span><br><span class="line">Switched to branch &#x27;dev&#x27;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> git status</span></span><br><span class="line">On branch dev</span><br><span class="line">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure><p>工作区是干净的，刚才的工作现场存到哪去了？用<code>git stash list</code>命令看看：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash list</span></span><br><span class="line">stash@&#123;0&#125;: WIP on dev: f52c633 add merge</span><br></pre></td></tr></table></figure><p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：</p><p>一是用<code>git stash apply</code>恢复，但是恢复后，stash内容并不删除，你需要用<code>git stash drop</code>来删除；</p><p>另一种方式是用<code>git stash pop</code>，恢复的同时把stash内容也删了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash pop</span></span><br></pre></td></tr></table></figure><p>再用<code>git stash list</code>查看，就看不到任何stash内容了。</p><p>你可以多次stash，恢复的时候，先用<code>git stash list</code>查看，然后恢复指定的stash，用命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git stash apply stash@&#123;0&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p>软件开发中，总有无穷无尽的新的功能要不断添加进来。</p><p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。</p><p>开发一个新feature，最好新建一个分支；</p><p>如果要丢弃一个没有被合并过的分支，可以通过<code>git branch -D &lt;name&gt;</code>强行删除。</p><h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程仓库克隆时，实际上Git自动把本地的<code>master</code>分支和远程的<code>master</code>分支对应起来了，并且，远程仓库的默认名称是<code>origin</code>。</p><p>要查看远程库的信息，用<code>git remote</code>，用<code>git remote -v</code>显示更详细的信息。显示了可以抓取和推送的<code>origin</code>的地址。如果没有推送权限，就看不到push的地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git remote -v</span></span><br><span class="line">origin  git@github.com:Qin-K/learn-git.git (fetch)</span><br><span class="line">origin  git@github.com:Qin-K/learn-git.git (push)</span><br></pre></td></tr></table></figure><h4 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h4><p>推送分支，就是把该分支上的所有本地提交推送到远程库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin master</span></span><br></pre></td></tr></table></figure><p>推送到<code>dev</code>分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git push origin dev</span></span><br></pre></td></tr></table></figure><p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？</p><ul><li><code>master</code>分支是主分支，因此要时刻与远程同步；</li><li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li><li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li><li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li></ul><h4 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h4><p>多人协作时，大家都会往<code>master</code>和<code>dev</code>分支上推送各自的修改。</p><p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的<code>master</code>分支。</p><p>现在，你的小伙伴要在<code>dev</code>分支上开发，就必须创建远程<code>origin</code>的<code>dev</code>分支到本地，于是他用这个命令创建本地<code>dev</code>分支：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout -b dev origin/dev</span></span><br></pre></td></tr></table></figure><p>他就可以在<code>dev</code>上继续修改，然后，时不时地把<code>dev</code>分支<code>push</code>到远程。</p><p>你的小伙伴已经向<code>origin/dev</code>分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送。推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用<code>git pull</code>把最新的提交从<code>origin/dev</code>抓下来，然后，在本地合并，解决冲突，再推送。</p><p><code>git pull</code>也失败了，原因是没有指定本地<code>dev</code>分支与远程<code>origin/dev</code>分支的链接，根据提示，设置<code>dev</code>和<code>origin/dev</code>的链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git branch --set-upstream-to=origin/dev dev</span></span><br></pre></td></tr></table></figure><p>因此，多人协作的工作模式通常是这样：</p><ol><li>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</li><li>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</li><li>如果合并有冲突，则解决冲突，并在本地提交；</li><li>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</li></ol><p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p><ul><li>查看远程库信息，使用<code>git remote -v</code>；</li><li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li><li>从本地推送分支，使用<code>git push origin branch-name</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；</li><li>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</li><li>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</li><li>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</li></ul><h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。每次合并再push后，分支变成了这样：</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161638.png"/><p>在本地创建修改rebase.txt，然后push时远程已经修改，必须使用<code>git pull</code>拉取远程的修改。最后使用<code>git log </code>,显然提交历史分叉了。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161648.png"/>  <p>使用<code>git rebase</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git rebase</span></span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: 测试rebase</span><br><span class="line">Applying: 第一次修改rebase</span><br><span class="line">Applying: 第二次修改rebase</span><br></pre></td></tr></table></figure><p>再使用<code>git log</code>查看原本分叉的提交现在变成一条直线了。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161701.png"/><p>通过push操作把本地分支推送到远程后再查看<code>git log</code>。远程提交的git 历史也变成了一条直线。</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161716.png"/><p>这就是rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了。</p><ul><li>rebase操作可以把本地未push的分叉提交历史整理成直线；</li><li>rebase的目的是使得我们在查看历史提交的变化时更容易，因为分叉的提交需要三方对比。</li></ul><h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p><h3 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h3><p>首先，切换到需要打标签的分支上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git checkout master</span></span><br></pre></td></tr></table></figure><ul><li>使用<code>git tag</code>命令创建一个标签。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag v1.0</span></span><br></pre></td></tr></table></figure><p>默认标签是打在最新提交的commit上的。对以前提交的commit打tag：方法是找到历史提交的commit id。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">log</span> --pretty=oneline --abbrev-commit</span></span><br><span class="line">45835f8 (HEAD -&gt; master, tag: v1.0, origin/master) 第二次修改rebase</span><br><span class="line">8714bad 第一次修改rebase</span><br><span class="line">73c5b50 测试rebase</span><br><span class="line">...</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag test-rebase 73c5b50</span></span><br></pre></td></tr></table></figure><ul><li>查看所有标签</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag</span></span><br><span class="line">test-rebase</span><br><span class="line">v1.0</span><br></pre></td></tr></table></figure><p>标签不是按时间顺序列出，而是按字母排序的。</p><ul><li><p>查看标签信息 git show &lt;tagname&gt;</p><img src="https://raw.githubusercontent.com/Qin-K/picGo/master/img/20190904161740.png"/></li><li><p>创建带有说明的标签git tag -a -m</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git tag -a v0.1 -m <span class="string">&quot;修改readme&quot;</span> 35463c</span></span><br></pre></td></tr></table></figure><p>使用<code>git show &lt;tagname&gt;</code>可以看到备注信息。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git show v0.1</span></span><br><span class="line">tag v0.1</span><br><span class="line">Tagger: Qin-K &lt;1547127079@qq.com&gt;</span><br><span class="line">Date:   Sun Jul 7 19:22:45 2019 +0800</span><br><span class="line"></span><br><span class="line">修改readme</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></li><li><p>命令<code>git tag &lt;tagname&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id；</p></li><li><p>命令<code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息；</p></li><li><p>命令<code>git tag</code>可以查看所有标签。</p></li></ul><h3 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h3><ul><li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li><li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li><li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li><li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li></ul><h2 id="自定义git"><a href="#自定义git" class="headerlink" title="自定义git"></a>自定义git</h2><h3 id="忽略特殊文件"><a href="#忽略特殊文件" class="headerlink" title="忽略特殊文件"></a>忽略特殊文件</h3><p>在Git工作区的根目录下创建一个特殊的<code>.gitignore</code>文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>不需要从头写<code>.gitignore</code>文件，GitHub已经为我们准备了各种配置文件，组合一下就可以使用了。所有配置文件可以直接在线浏览：<a href="https://github.com/github/gitignore">https://github.com/github/gitignore</a></p><p>忽略文件的原则是：</p><ol><li>忽略操作系统自动生成的文件，比如缩略图等；</li><li>忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的<code>.class</code>文件；</li><li>忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># Windows:</span><br><span class="line">Thumbs.db</span><br><span class="line">ehthumbs.db</span><br><span class="line">Desktop.ini</span><br><span class="line"></span><br><span class="line"># Python:</span><br><span class="line">*.py[cod]</span><br><span class="line">*.so</span><br><span class="line">*.egg</span><br><span class="line">*.egg-info</span><br><span class="line">dist</span><br><span class="line">build</span><br><span class="line"></span><br><span class="line"># My configurations:</span><br><span class="line">db.ini</span><br><span class="line">deploy_key_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被<code>.gitignore</code>忽略的文件，可以用<code>-f</code>强制添加到Git：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git add -f App.class</span></span><br></pre></td></tr></table></figure><p>找出来到底哪个规则写错了，可以用<code>git check-ignore</code>命令检查：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git check-ignore -v App.class</span><br><span class="line">.gitignore:3:*.classApp.class</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>正则表达式的基本语法介绍</title>
      <link href="/2018/06/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/"/>
      <url>/2018/06/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95%E4%BB%8B%E7%BB%8D/</url>
      <content type="html"><![CDATA[<h2 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h2><p>正则表达式，⼜称正规表示式、正规表示法、正规表达式、规则表达式、常规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或RE），是计算机科学的⼀个概念。正则表达式使⽤单个字符串来描述、匹配⼀系列匹配某个句法规则的字符串。在很多⽂本编辑器⾥，正则表达式通常被⽤来检索、替换那些匹配某个模式的⽂本。Regular Expression的“Regular”⼀般被译为“正则”、“正规”、“常规”。此处的“Regular”即是“规则”、“规律”的意思，Regular Expression即“描述某种规则的表达式”之意。</p><a id="more"></a><h2 id="python的re模块操作"><a href="#python的re模块操作" class="headerlink" title="python的re模块操作"></a>python的re模块操作</h2><p>在Python中需要通过正则表达式对字符串进行匹配的时候，需要使用re模块。</p><h3 id="match"><a href="#match" class="headerlink" title="match"></a>match</h3><p>re.match是⽤来进⾏正则匹配检查的⽅法，若字符串匹配正则表达式，则match⽅法返回匹配对象（Match Object），否则返回None（注意不是空字符串””）。匹配对象Macth Object具有group⽅法，⽤来返回字符串的匹配部分。re.match()能够匹配出以XXX开头的字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = re.match(正则表达式， 要匹配的字符串)</span><br><span class="line"></span><br><span class="line">使用group方法来提取数据</span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure><h3 id="示例-匹配以hello开头的语句"><a href="#示例-匹配以hello开头的语句" class="headerlink" title="示例(匹配以hello开头的语句)"></a>示例(匹配以hello开头的语句)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: result = re.match(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;hello world&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: result.group()</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="正则表达式基础"><a href="#正则表达式基础" class="headerlink" title="正则表达式基础"></a>正则表达式基础</h2><h3 id="表示字符"><a href="#表示字符" class="headerlink" title="表示字符"></a>表示字符</h3><p>正则表达式的单字符匹配</p><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">.</td><td>匹配任意一个字符(除了\n)</td></tr><tr><td align="center">[]</td><td>匹配[]中列举的字符</td></tr><tr><td align="center">\d</td><td>匹配数字0-9</td></tr><tr><td align="center">\D</td><td>匹配非数字</td></tr><tr><td align="center">\s</td><td>匹配空白(空格/tab键)</td></tr><tr><td align="center">\S</td><td>匹配非空格</td></tr><tr><td align="center">\w</td><td>匹配单词字符(a-z、 A-Z、 0-9、 _)</td></tr><tr><td align="center">\W</td><td>匹配费单词字符</td></tr></tbody></table><h3 id="表示数量"><a href="#表示数量" class="headerlink" title="表示数量"></a>表示数量</h3><p>正则表达式的多个字符匹配</p><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">*</td><td>匹配前一个字符出现0次或者无限次(可有可无)</td></tr><tr><td align="center">+</td><td>匹配前一个字符出现1次或者无限次(至少又一次)</td></tr><tr><td align="center">?</td><td>匹配前一个字符出现1次或者0次(要么1次要么没有)</td></tr><tr><td align="center">{m}</td><td>匹配前一个字符出现m次</td></tr><tr><td align="center">{m,}</td><td>匹配前一个字符至少出现m次</td></tr><tr><td align="center">{m,n}</td><td>匹配前一个字符出现m到n次</td></tr></tbody></table><h3 id="表示边界"><a href="#表示边界" class="headerlink" title="表示边界"></a>表示边界</h3><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">^</td><td>匹配字符串开头</td></tr><tr><td align="center">$</td><td>匹配字符串结尾</td></tr><tr><td align="center">\b</td><td>匹配一个单词的边界</td></tr><tr><td align="center">\B</td><td>匹配非单词边界</td></tr></tbody></table><h3 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h3><p>与⼤多数编程语⾔相同， 正则表达式⾥使⽤”&quot;作为转义字符 ，这就可能造成反斜杠困扰。假如你需要匹配⽂本中的字符”&quot;，那么使⽤编程语⾔表示的正则表达式⾥将需要4个反斜杠”\“：前两个和后两个分别⽤于在编程语⾔⾥转义成反斜杠，转换成两个反斜杠后再在正则表达式⾥转义成⼀个反斜杠。Python⾥的原⽣字符串很好地解决了这个问题，有了原始字符串，你再也不⽤担⼼是不是漏写了反斜杠，写出来的表达式也更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: m = <span class="string">&quot;\\na&quot;</span></span><br><span class="line">In [<span class="number">7</span>]: result = re.match(<span class="string">r&quot;\\na&quot;</span>, m)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: result.group()</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">&#x27;\\na&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: print(result.group())</span><br><span class="line">\na</span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="示例1-匹配手机号码"><a href="#示例1-匹配手机号码" class="headerlink" title="示例1 匹配手机号码"></a>示例1 匹配手机号码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: result = re.match(<span class="string">&quot;1\d&#123;10&#125;$&quot;</span>, <span class="string">&quot;18888888888&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: result.group()</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">&#x27;18888888888&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="示例2-匹配163邮箱"><a href="#示例2-匹配163邮箱" class="headerlink" title="示例2 匹配163邮箱"></a>示例2 匹配163邮箱</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: result = re.match(<span class="string">&quot;\w&#123;4,20&#125;@163\.com$&quot;</span>,<span class="string">&quot;hello@163.com&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: result.group()</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">&#x27;hello@163.com&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h2><table><thead><tr><th align="center">字符</th><th>功能</th></tr></thead><tbody><tr><td align="center">竖线</td><td>匹配左右任意一个表达式</td></tr><tr><td align="center">(ab)</td><td>将括号里中的字符作为一个分组</td></tr><tr><td align="center">\num</td><td>引用分组num匹配到的字符串</td></tr><tr><td align="center">(?P&lt;name&gt;)</td><td>分组起别名</td></tr><tr><td align="center">(?P=name)</td><td>引用起别名为name分组匹配到的字符串</td></tr></tbody></table><h3 id="匹配0-100之间的数字"><a href="#匹配0-100之间的数字" class="headerlink" title="匹配0-100之间的数字"></a>匹配0-100之间的数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: result = re.match(<span class="string">&quot;0$|[1-9]\d$|100&quot;</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: result.group()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">&#x27;0&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: result = re.match(<span class="string">&quot;0$|[1-9]\d$|100&quot;</span>, <span class="string">&quot;87&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: result.group()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">&#x27;87&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: result = re.match(<span class="string">&quot;0$|[1-9]\d$|100&quot;</span>, <span class="string">&quot;08&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: result.group()</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">AttributeError                          Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-27</span>-c8eb6f1e4981&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 result.group()</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> object has no attribute <span class="string">&#x27;group&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="()分组"></a>()分组</h3><p>()分组可以通过group(num)来对对应匹配分组的内容进行提取group(0)表示所有匹配的内容0可以不写group()，大于1后是匹配的对应分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">57</span>]: result = re.match(<span class="string">&quot;(\w+) (\d+)&quot;</span>, <span class="string">&quot;hello 100&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">58</span>]: result.group()</span><br><span class="line">Out[<span class="number">58</span>]: <span class="string">&#x27;hello 100&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">59</span>]: result.group(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">59</span>]: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">60</span>]: result.group(<span class="number">2</span>)</span><br><span class="line">Out[<span class="number">60</span>]: <span class="string">&#x27;100&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="re模块的高级用法"><a href="#re模块的高级用法" class="headerlink" title="re模块的高级用法"></a>re模块的高级用法</h2><h3 id="search"><a href="#search" class="headerlink" title="search"></a>search</h3><p>查找整个要匹配的字符串，返回第一次匹配成功的内容对象<br>例:匹配出字符串中的数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">26</span>]: re.search(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;fdaj174315&quot;</span>)</span><br><span class="line">Out[<span class="number">26</span>]: &lt;_sre.SRE_Match object; span=(<span class="number">4</span>, <span class="number">10</span>), match=<span class="string">&#x27;174315&#x27;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h3><p>查找整个要匹配的字符串，返回所有匹配的内容,返回一个列表<br>例:匹配出字符串中的所有数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: result = re.findall(<span class="string">&quot;\d+&quot;</span>, <span class="string">&quot;hello123world456hi11&quot;</span>)</span><br><span class="line">In [<span class="number">31</span>]: result</span><br><span class="line">Out[<span class="number">31</span>]: [<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;456&#x27;</span>, <span class="string">&#x27;11&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>将匹配到的数据进行替换，返回字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(正则表达式，替换的内容，匹配的字符串)</span><br></pre></td></tr></table></figure><p>例：将字符串中的所有数字置0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: result = re.sub(<span class="string">r&quot;\d+&quot;</span>,<span class="string">&quot;0&quot;</span>, <span class="string">&quot;python:10, java:80, cpp:90&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: result</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">&#x27;python:0, java:0, cpp:0&#x27;</span></span><br></pre></td></tr></table></figure><p>替换的内容可以为函数<br><strong>函数传入内容为匹配到的内容为一个对象，取值的时候需要用，返回的为替换的内容必须为字符串类型</strong><br>例：将字符串中的所有数字加5</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">temp</span>):</span></span><br><span class="line">    ...:    temp = temp.group()</span><br><span class="line">    ...:    temp = int(temp) + <span class="number">5</span></span><br><span class="line">    ...:    <span class="keyword">return</span> str(temp)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: result = re.sub(<span class="string">r&quot;\d+&quot;</span>,add, <span class="string">&quot;python:10, java:80, cpp:90&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: result</span><br><span class="line">Out[<span class="number">42</span>]: <span class="string">&#x27;python:15, java:85, cpp:95&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="split"><a href="#split" class="headerlink" title="split"></a>split</h3><p>根据匹配进行切割字符串，返回一个列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(需要根据什么切割, 切割的字符串)</span><br></pre></td></tr></table></figure><p>例：切割字符串”python:java php-cpp”</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: result = re.split(<span class="string">&quot;:| |-&quot;</span>,<span class="string">&quot;python:java php-cpp&quot;</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: result</span><br><span class="line">Out[<span class="number">45</span>]: [<span class="string">&#x27;python&#x27;</span>, <span class="string">&#x27;java&#x27;</span>, <span class="string">&#x27;php&#x27;</span>, <span class="string">&#x27;cpp&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="python贪婪和非贪婪"><a href="#python贪婪和非贪婪" class="headerlink" title="python贪婪和非贪婪"></a>python贪婪和非贪婪</h2><p>Python⾥数量词默认是贪婪的（在少数语⾔⾥也可能是默认⾮贪婪），总是尝试匹配尽可能多的字符；⾮贪婪则相反，总是尝试匹配尽可能少的字符。在”*”,”?”,”+”,”{m,n}”表示数量后⾯加上？，使贪婪变成⾮贪婪。<br>例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">49</span>]: result = re.match(<span class="string">&quot;.+(\d+-\d+-\d+-\d+)&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: result.group(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">50</span>]: <span class="string">&#x27;4-235-22-423&#x27;</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: result = re.match(<span class="string">&quot;.+?(\d+-\d+-\d+-\d+)&quot;</span>, s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: result.group(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="string">&#x27;234-235-22-423&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正则表达式模式中使⽤到通配字，那它在从左到右的顺序求值时，会尽量“抓取”满⾜匹配最⻓字符串，在我们上⾯的例⼦⾥⾯，“.+”会从字符串的启始处抓取满⾜模式的最⻓字符，其中包括我们想得到的第⼀个整型字段的中的⼤<br>部分，“\d+”只需⼀位字符就可以匹配，所以它匹配了数字“4”，⽽“.+”则匹配了从字符串起始到这个第⼀位数字4之前的所有字符。解决⽅式：⾮贪婪操作符“？”，这个操作符可以⽤在”*”,”+”,”?”的后⾯，要求正则匹配的越少越好。</p><p>从下列字符串中提取文本去除所有html标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;p&gt;岗位职责：&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;必备要求：&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;技术要求：&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL&#x2F;PostgreSQL 中的一种&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;5、熟悉 Javascript&#x2F;CSS&#x2F;HTML5，JQuery、React、Vue.js&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;加分项：&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;&#x2F;p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: s = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    ...: &lt;div&gt;^M</span></span><br><span class="line"><span class="string">    ...:         &lt;p&gt;岗位职责：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;必备要求：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;技术要求：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设</span></span><br><span class="line"><span class="string">    ...: 计模式&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;</span></span><br><span class="line"><span class="string">    ...: ^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreS</span></span><br><span class="line"><span class="string">    ...: QL 中的一种&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;加分项：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: ^M</span></span><br><span class="line"><span class="string">    ...:         &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>方法1：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">71</span>]: re.sub(<span class="string">&quot;&lt;\w+&gt;|&lt;/\w+&gt;&quot;</span>,<span class="string">&quot;&quot;</span>, s)</span><br><span class="line">Out[<span class="number">71</span>]: <span class="string">&#x27;\n\n        岗位职责：\n完成推荐算法、数据统计、接口、后台等服务器端相关工作\n\n必备要求：\n良好的自我驱动力和职业素养，工作积极主动、结果导向\n&amp;nbsp;\n技术要求：\n1、一年以上 Python 开发经验，掌握面向对象分析和设计， 了解设计模式\n2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架\n3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种\n4、掌握NoSQL、MQ，熟练使用对应技术解决方案\n5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js\n&amp;nbsp;\n加分项：\n大数据，数理统计，机器学习，sklearn，高性能，大并发。\n\n        \n&#x27;</span></span><br></pre></td></tr></table></figure><p>方法2:<br>关闭贪婪算法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: re.sub(<span class="string">&quot;&lt;\w+?&gt;&quot;</span>, <span class="string">&quot;&quot;</span>,s)</span><br><span class="line">Out[<span class="number">72</span>]: <span class="string">&#x27;\n\n        岗位职责：&lt;/p&gt;\n完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;\n&lt;/p&gt;\n必备要求：&lt;/p&gt;\n良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;\n&amp;nbsp;&lt;/p&gt;\n技术要求：&lt;/p&gt;\n1、一年以上 Python 开发经 验，掌握面向对象分析和设计，了解设计模式&lt;/p&gt;\n2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;\n3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种&lt;/p&gt;\n4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;\n5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;\n&amp;nbsp;&lt;/p&gt;\n加 分项：&lt;/p&gt;\n大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;\n\n        &lt;/div&gt;\n&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Github上Markdown语法总结</title>
      <link href="/2018/05/28/Github%E4%B8%8AMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2018/05/28/Github%E4%B8%8AMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown中标题如果想定义一个标题，可以在前面加上#关键字。<br>1-6个#号对应表示1-6级标题，标准Markdown语法#与正文之间有空格。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表: 关键字* 或者(-,+)， 有序列表: 使用”数字.”格式， 后面需要加空格再写正文。<br>列表之间也可以相互嵌套， 需要嵌套加上一个tab键。取消列表按两个回车。<br>任务列表: - [x] 已完成任务列表。- [ ] 未完成任务列表[空格]。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line"></span><br><span class="line">- 无序列表</span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line"></span><br><span class="line">- [x] 已完成任务列表</span><br><span class="line">- [x] 已完成任务列表</span><br><span class="line">- [] 未完成任务列表</span><br><span class="line">- [] 未完成任务列表</span><br></pre></td></tr></table></figure><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li>无序列表<ol><li>有序列表</li><li>有序列表</li><li>有序列表<ul><li>无序列表</li><li>无序列表</li></ul></li></ol></li></ul><ul><li><input checked="" disabled="" type="checkbox"> 已完成任务列表</li><li><input checked="" disabled="" type="checkbox"> 已完成任务列表</li><li><input disabled="" type="checkbox"> 未完成任务列表</li><li><input disabled="" type="checkbox"> 未完成任务列表</li></ul><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p>Markdown支持4中文本样式分别是：加粗、斜体、删除线和加粗且斜体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br><span class="line">**_加粗且斜体_**</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure><p><em>斜体</em><br><strong>加粗</strong><br><strong><em>加粗且斜体</em></strong><br><del>删除线</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可，引用之间也可以嵌套。</p><blockquote><p>这是一个引用</p><blockquote><p>这也是一个引用</p><blockquote><p>这还是一个引用</p></blockquote></blockquote></blockquote><h2 id="引用代码"><a href="#引用代码" class="headerlink" title="引用代码"></a>引用代码</h2><p>引入一个代码用倒引号`括起来<br>引用一段代码用三个倒引号括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用一段代码</span><br><span class="line">int a &#x3D; 10;</span><br><span class="line">int b &#x3D; 20;</span><br><span class="line">int c &#x3D; a + b;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>上面可以直接在三个倒引号后面加入引用代码的语言类型。编辑器会对应的进行渲染。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用一段代码</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="引入链接"><a href="#引入链接" class="headerlink" title="引入链接"></a>引入链接</h2><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[文字描述](链接地址)</span><br><span class="line">[百度](http:&#x2F;&#x2F;www.baidu.com)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com/">百度</a></p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](图片url或本地链接)</span><br><span class="line">![](Github上Markdown语法总结&#x2F;佩奇.jpg)</span><br></pre></td></tr></table></figure><p><img src="Github%E4%B8%8AMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/%E4%BD%A9%E5%A5%87.jpg"></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一表头 | 第二表头</span><br><span class="line">------------ | -------------</span><br><span class="line">第一单元格内容 | 第二单元格内容</span><br><span class="line">第一列内容 | 第二列内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>第一表头</th><th>第二表头</th></tr></thead><tbody><tr><td>第一单元格内容</td><td>第二单元格内容</td></tr><tr><td>第一列内容</td><td>第二列内容</td></tr></tbody></table><h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>可以用反斜杠来插入一些在语法中有其它意义的符号，如：可以在星号的前面加上反斜杠。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure><p><em>literal asterisks</em></p><p>反斜杠支持下面的字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜杠</span><br><span class="line">&#96;   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  大括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括号</span><br><span class="line">#   井字号</span><br><span class="line">+    加号</span><br><span class="line">-    减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>

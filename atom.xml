<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>秦凯的博客</title>
  
  <subtitle>一只计算机小菜鸟</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-28T13:53:00.473Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Qin Kai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2018/06/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/24/正则表达式/</id>
    <published>2018-06-24T11:12:29.000Z</published>
    <updated>2018-06-28T13:53:00.473Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式概述"><a href="#正则表达式概述" class="headerlink" title="正则表达式概述"></a>正则表达式概述</h1><p>正则表达式，⼜称正规表示式、正规表示法、正规表达式、规则表达式、常<br>规表示法（英语：Regular Expression，在代码中常简写为regex、regexp或<br>RE），是计算机科学的⼀个概念。正则表达式使⽤单个字符串来描述、匹配<br>⼀系列匹配某个句法规则的字符串。在很多⽂本编辑器⾥，正则表达式通常<br>被⽤来检索、替换那些匹配某个模式的⽂本。<br>Regular Expression的“Regular”⼀般被译为“正则”、“正规”、“常规”。此处<br>的“Regular”即是“规则”、“规律”的意思，Regular Expression即“描述某种规则<br>的表达式”之意。</p><h1 id="re模块操作"><a href="#re模块操作" class="headerlink" title="re模块操作"></a>re模块操作</h1><p>在Python中需要通过正则表达式对字符串进行匹配的时候，需要使用re模块。</p><h2 id="match"><a href="#match" class="headerlink" title="match"></a>match</h2><p>re.match是⽤来进⾏正则匹配检查的⽅法，若字符串匹配正则<br>表达式，则match⽅法返回匹配对象（Match Object），否则<br>返回None（注意不是空字符串””）。<br>匹配对象Macth Object具有group⽅法，⽤来返回字符串的匹<br>配部分。<br>re.match()能够匹配出以XXX开头的字符串<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入模块</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">result = re.match(正则表达式， 要匹配的字符串)</span><br><span class="line"></span><br><span class="line">使用group方法来提取数据</span><br><span class="line">result.group()</span><br></pre></td></tr></table></figure></p><h2 id="示例-匹配以hello开头的语句"><a href="#示例-匹配以hello开头的语句" class="headerlink" title="示例(匹配以hello开头的语句)"></a>示例(匹配以hello开头的语句)</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">2</span>]: result = re.match(<span class="string">"hello"</span>, <span class="string">"hello world"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: result.group()</span><br><span class="line">Out[<span class="number">3</span>]: <span class="string">'hello'</span></span><br></pre></td></tr></table></figure><h1 id="表示字符"><a href="#表示字符" class="headerlink" title="表示字符"></a>表示字符</h1><p>正则表达式的单字符匹配</p><table><thead><tr><th style="text-align:center">字符</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">.</td><td>匹配任意一个字符(除了\n)</td></tr><tr><td style="text-align:center">[]</td><td>匹配[]中列举的字符</td></tr><tr><td style="text-align:center">\d</td><td>匹配数字0-9</td></tr><tr><td style="text-align:center">\D</td><td>匹配非数字</td></tr><tr><td style="text-align:center">\s</td><td>匹配空白(空格/tab键)</td></tr><tr><td style="text-align:center">\S</td><td>匹配非空格</td></tr><tr><td style="text-align:center">\w</td><td>匹配单词字符(a-z、 A-Z、 0-9、 _)</td></tr><tr><td style="text-align:center">\W</td><td>匹配费单词字符</td></tr></tbody></table><h1 id="表示数量"><a href="#表示数量" class="headerlink" title="表示数量"></a>表示数量</h1><p>正则表达式的多个字符匹配</p><table><thead><tr><th style="text-align:center">字符</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>匹配前一个字符出现0次或者无限次(可有可无)</td></tr><tr><td style="text-align:center">+</td><td>匹配前一个字符出现1次或者无限次(至少又一次)</td></tr><tr><td style="text-align:center">?</td><td>匹配前一个字符出现1次或者0次(要么1次要么没有)</td></tr><tr><td style="text-align:center">{m}</td><td>匹配前一个字符出现m次</td></tr><tr><td style="text-align:center">{m,}</td><td>匹配前一个字符至少出现m次</td></tr><tr><td style="text-align:center">{m,n}</td><td>匹配前一个字符出现m到n次</td></tr></tbody></table><h1 id="表示边界"><a href="#表示边界" class="headerlink" title="表示边界"></a>表示边界</h1><table><thead><tr><th style="text-align:center">字符</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td>匹配字符串开头</td></tr><tr><td style="text-align:center">$</td><td>匹配字符串结尾</td></tr><tr><td style="text-align:center">\b</td><td>匹配一个单词的边界</td></tr><tr><td style="text-align:center">\B</td><td>匹配非单词边界</td></tr></tbody></table><h1 id="原始字符串"><a href="#原始字符串" class="headerlink" title="原始字符串"></a>原始字符串</h1><p>与⼤多数编程语⾔相同， 正则表达式⾥使⽤”\”作为转义字符 ，这就可能造成反<br>斜杠困扰。假如你需要匹配⽂本中的字符”\”，那么使⽤编程语⾔表示的正则<br>表达式⾥将需要4个反斜杠”\“：前两个和后两个分别⽤于在编程语⾔⾥转义<br>成反斜杠，转换成两个反斜杠后再在正则表达式⾥转义成⼀个反斜杠。<br>Python⾥的原⽣字符串很好地解决了这个问题，有了原始字符串，你再也不<br>⽤担⼼是不是漏写了反斜杠，写出来的表达式也更直观。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">6</span>]: m = <span class="string">"\\na"</span></span><br><span class="line">In [<span class="number">7</span>]: result = re.match(<span class="string">r"\\na"</span>, m)</span><br><span class="line"></span><br><span class="line">In [<span class="number">8</span>]: result.group()</span><br><span class="line">Out[<span class="number">8</span>]: <span class="string">'\\na'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]: print(result.group())</span><br><span class="line">\na</span><br></pre></td></tr></table></figure><h1 id="示例1-匹配手机号码"><a href="#示例1-匹配手机号码" class="headerlink" title="示例1 匹配手机号码"></a>示例1 匹配手机号码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">11</span>]: result = re.match(<span class="string">"1\d&#123;10&#125;$"</span>, <span class="string">"18888888888"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">12</span>]: result.group()</span><br><span class="line">Out[<span class="number">12</span>]: <span class="string">'18888888888'</span></span><br></pre></td></tr></table></figure><h1 id="示例2-匹配163邮箱"><a href="#示例2-匹配163邮箱" class="headerlink" title="示例2 匹配163邮箱"></a>示例2 匹配163邮箱</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">14</span>]: result = re.match(<span class="string">"\w&#123;4,20&#125;@163\.com$"</span>,<span class="string">"hello@163.com"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">15</span>]: result.group()</span><br><span class="line">Out[<span class="number">15</span>]: <span class="string">'hello@163.com'</span></span><br></pre></td></tr></table></figure><h1 id="匹配分组"><a href="#匹配分组" class="headerlink" title="匹配分组"></a>匹配分组</h1><table><thead><tr><th style="text-align:center">字符</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:center"></td><td></td><td>匹配左右任意一个表达式</td></tr><tr><td style="text-align:center">(ab)</td><td>将括号里中的字符作为一个分组</td></tr><tr><td style="text-align:center">\num</td><td>引用分组num匹配到的字符串</td></tr><tr><td style="text-align:center">(?P<name>)</name></td><td>分组起别名</td></tr><tr><td style="text-align:center">(?P=name)</td><td>引用起别名为name分组匹配到的字符串</td></tr></tbody></table><h2 id="匹配0-100之间的数字"><a href="#匹配0-100之间的数字" class="headerlink" title="匹配0-100之间的数字"></a>匹配0-100之间的数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">21</span>]: result = re.match(<span class="string">"0$|[1-9]\d$|100"</span>, <span class="string">"0"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: result.group()</span><br><span class="line">Out[<span class="number">22</span>]: <span class="string">'0'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">23</span>]: result = re.match(<span class="string">"0$|[1-9]\d$|100"</span>, <span class="string">"87"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">25</span>]: result.group()</span><br><span class="line">Out[<span class="number">25</span>]: <span class="string">'87'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">26</span>]: result = re.match(<span class="string">"0$|[1-9]\d$|100"</span>, <span class="string">"08"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">27</span>]: result.group()</span><br><span class="line">-------------------------------------------------------------------------</span><br><span class="line">AttributeError                          Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-27</span>-c8eb6f1e4981&gt; <span class="keyword">in</span> &lt;module&gt;()</span><br><span class="line">----&gt; 1 result.group()</span><br><span class="line"></span><br><span class="line">AttributeError: <span class="string">'NoneType'</span> object has no attribute <span class="string">'group'</span></span><br></pre></td></tr></table></figure><h2 id="分组"><a href="#分组" class="headerlink" title="()分组"></a>()分组</h2><p>()分组可以通过group(num)来对对应匹配分组的内容进行提取<br>group(0)表示所有匹配的内容0可以不写group()，大于1后是匹配的对应分组<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [57]: result = re.match(&quot;(\w+) (\d+)&quot;, &quot;hello 100&quot;)</span><br><span class="line"></span><br><span class="line">In [58]: result.group()</span><br><span class="line">Out[58]: &apos;hello 100&apos;</span><br><span class="line"></span><br><span class="line">In [59]: result.group(1)</span><br><span class="line">Out[59]: &apos;hello&apos;</span><br><span class="line"></span><br><span class="line">In [60]: result.group(2)</span><br><span class="line">Out[60]: &apos;100&apos;</span><br><span class="line">``` </span><br><span class="line"># re模块的高级用法</span><br><span class="line">## search</span><br><span class="line">查找整个要匹配的字符串，返回第一次匹配成功的内容对象</span><br><span class="line">例:匹配出字符串中的数字</span><br><span class="line">``` python</span><br><span class="line">In [26]: re.search(&quot;\d+&quot;, &quot;fdaj174315&quot;)</span><br><span class="line">Out[26]: &lt;_sre.SRE_Match object; span=(4, 10), match=&apos;174315&apos;&gt;</span><br></pre></td></tr></table></figure></p><h2 id="findall"><a href="#findall" class="headerlink" title="findall"></a>findall</h2><p>查找整个要匹配的字符串，返回所有匹配的内容,返回一个列表<br>例:匹配出字符串中的所有数字<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">30</span>]: result = re.findall(<span class="string">"\d+"</span>, <span class="string">"hello123world456hi11"</span>)</span><br><span class="line">In [<span class="number">31</span>]: result</span><br><span class="line">Out[<span class="number">31</span>]: [<span class="string">'123'</span>, <span class="string">'456'</span>, <span class="string">'11'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h2><p>将匹配到的数据进行替换，返回字符串。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.sub(正则表达式，替换的内容，匹配的字符串)</span><br></pre></td></tr></table></figure></p><p>例：将字符串中的所有数字置0<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">33</span>]: result = re.sub(<span class="string">r"\d+"</span>,<span class="string">"0"</span>, <span class="string">"python:10, java:80, cpp:90"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">34</span>]: result</span><br><span class="line">Out[<span class="number">34</span>]: <span class="string">'python:0, java:0, cpp:0'</span></span><br></pre></td></tr></table></figure></p><p>替换的内容可以为函数<br><strong>函数传入内容为匹配到的内容为一个对象，取值的时候需要用，返回的为替换的内容必须为字符串类型</strong><br>例：将字符串中的所有数字加5<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">40</span>]: <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(temp)</span>:</span></span><br><span class="line">    ...:    temp = temp.group()</span><br><span class="line">    ...:    temp = int(temp) + <span class="number">5</span></span><br><span class="line">    ...:    <span class="keyword">return</span> str(temp)</span><br><span class="line">    ...:</span><br><span class="line">    ...:</span><br><span class="line"></span><br><span class="line">In [<span class="number">41</span>]: result = re.sub(<span class="string">r"\d+"</span>,add, <span class="string">"python:10, java:80, cpp:90"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">42</span>]: result</span><br><span class="line">Out[<span class="number">42</span>]: <span class="string">'python:15, java:85, cpp:95'</span></span><br></pre></td></tr></table></figure></p><h2 id="split"><a href="#split" class="headerlink" title="split"></a>split</h2><p>根据匹配进行切割字符串，返回一个列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">re.split(需要根据什么切割, 切割的字符串)</span><br></pre></td></tr></table></figure></p><p>例：切割字符串”python:java php-cpp”<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">44</span>]: result = re.split(<span class="string">":| |-"</span>,<span class="string">"python:java php-cpp"</span>)</span><br><span class="line"></span><br><span class="line">In [<span class="number">45</span>]: result</span><br><span class="line">Out[<span class="number">45</span>]: [<span class="string">'python'</span>, <span class="string">'java'</span>, <span class="string">'php'</span>, <span class="string">'cpp'</span>]</span><br></pre></td></tr></table></figure></p><h1 id="python贪婪和非贪婪"><a href="#python贪婪和非贪婪" class="headerlink" title="python贪婪和非贪婪"></a>python贪婪和非贪婪</h1><p>Python⾥数量词默认是贪婪的（在少数语⾔⾥也可能是默认⾮贪婪），总是<br>尝试匹配尽可能多的字符；<br>⾮贪婪则相反，总是尝试匹配尽可能少的字符。<br>在”*”,”?”,”+”,”{m,n}”表示数量后⾯加上？，使贪婪变成⾮贪婪。<br>例：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">49</span>]: result = re.match(<span class="string">".+(\d+-\d+-\d+-\d+)"</span>, s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">50</span>]: result.group(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">50</span>]: <span class="string">'4-235-22-423'</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">51</span>]: result = re.match(<span class="string">".+?(\d+-\d+-\d+-\d+)"</span>, s)</span><br><span class="line"></span><br><span class="line">In [<span class="number">52</span>]: result.group(<span class="number">1</span>)</span><br><span class="line">Out[<span class="number">52</span>]: <span class="string">'234-235-22-423'</span></span><br></pre></td></tr></table></figure></p><p>正则表达式模式中使⽤到通配字，那它在从左到右的顺序求值时，会尽量“抓<br>取”满⾜匹配最⻓字符串，在我们上⾯的例⼦⾥⾯，“.+”会从字符串的启始处<br>抓取满⾜模式的最⻓字符，其中包括我们想得到的第⼀个整型字段的中的⼤<br>部分，“\d+”只需⼀位字符就可以匹配，所以它匹配了数字“4”，⽽“.+”则匹配<br>了从字符串起始到这个第⼀位数字4之前的所有字符。<br>解决⽅式：⾮贪婪操作符“？”，这个操作符可以⽤在”*”,”+”,”?”的后⾯，要求<br>正则匹配的越少越好。</p><h1 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h1><h2 id="从下列字符串中提取文本去除所有html标签"><a href="#从下列字符串中提取文本去除所有html标签" class="headerlink" title="从下列字符串中提取文本去除所有html标签"></a>从下列字符串中提取文本去除所有html标签</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">        &lt;p&gt;岗位职责：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&lt;br&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;必备要求：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;技术要求：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设计模式&lt;/p&gt;</span><br><span class="line">&lt;p&gt;2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;</span><br><span class="line">&lt;p&gt;3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种&lt;br&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;</span><br><span class="line">&lt;p&gt;5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;</span><br><span class="line">&lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;</span><br><span class="line">&lt;p&gt;加分项：&lt;/p&gt;</span><br><span class="line">&lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">70</span>]: s = <span class="string">"""</span></span><br><span class="line"><span class="string">    ...: &lt;div&gt;^M</span></span><br><span class="line"><span class="string">    ...:         &lt;p&gt;岗位职责：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;必备要求：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;技术要求：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;1、一年以上 Python 开发经验，掌握面向对象分析和设计，了解设</span></span><br><span class="line"><span class="string">    ...: 计模式&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;</span></span><br><span class="line"><span class="string">    ...: ^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreS</span></span><br><span class="line"><span class="string">    ...: QL 中的一种&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;&amp;nbsp;&lt;br&gt;&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;加分项：&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: &lt;p&gt;大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;^M</span></span><br><span class="line"><span class="string">    ...: ^M</span></span><br><span class="line"><span class="string">    ...:         &lt;/div&gt;</span></span><br></pre></td></tr></table></figure><p>方法1：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">71</span>]: re.sub(<span class="string">"&lt;\w+&gt;|&lt;/\w+&gt;"</span>,<span class="string">""</span>, s)</span><br><span class="line">Out[<span class="number">71</span>]: <span class="string">'\n\n        岗位职责：\n完成推荐算法、数据统计、接口、后台等服务器端相关工作\n\n必备要求：\n良好的自我驱动力和职业素养，工作积极主动、结果导向\n&amp;nbsp;\n技术要求：\n1、一年以上 Python 开发经验，掌握面向对象分析和设计， 了解设计模式\n2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架\n3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种\n4、掌握NoSQL、MQ，熟练使用对应技术解决方案\n5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js\n&amp;nbsp;\n加分项：\n大数据，数理统计，机器学习，sklearn，高性能，大并发。\n\n        \n'</span></span><br></pre></td></tr></table></figure></p><p>方法2:<br>关闭贪婪算法<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">72</span>]: re.sub(<span class="string">"&lt;\w+?&gt;"</span>, <span class="string">""</span>,s)</span><br><span class="line">Out[<span class="number">72</span>]: <span class="string">'\n\n        岗位职责：&lt;/p&gt;\n完成推荐算法、数据统计、接口、后台等服务器端相关工作&lt;/p&gt;\n&lt;/p&gt;\n必备要求：&lt;/p&gt;\n良好的自我驱动力和职业素养，工作积极主动、结果导向&lt;/p&gt;\n&amp;nbsp;&lt;/p&gt;\n技术要求：&lt;/p&gt;\n1、一年以上 Python 开发经 验，掌握面向对象分析和设计，了解设计模式&lt;/p&gt;\n2、掌握HTTP协议，熟悉MVC、MVVM等概念以及相关WEB开发框架&lt;/p&gt;\n3、掌握关系数据库开发设计，掌握 SQL，熟练使用 MySQL/PostgreSQL 中的一种&lt;/p&gt;\n4、掌握NoSQL、MQ，熟练使用对应技术解决方案&lt;/p&gt;\n5、熟悉 Javascript/CSS/HTML5，JQuery、React、Vue.js&lt;/p&gt;\n&amp;nbsp;&lt;/p&gt;\n加 分项：&lt;/p&gt;\n大数据，数理统计，机器学习，sklearn，高性能，大并发。&lt;/p&gt;\n\n        &lt;/div&gt;\n'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式概述&quot;&gt;&lt;a href=&quot;#正则表达式概述&quot; class=&quot;headerlink&quot; title=&quot;正则表达式概述&quot;&gt;&lt;/a&gt;正则表达式概述&lt;/h1&gt;&lt;p&gt;正则表达式，⼜称正规表示式、正规表示法、正规表达式、规则表达式、常&lt;br&gt;规表示法（英语：Regul
      
    
    </summary>
    
      <category term="语言无关类" scheme="http://yoursite.com/categories/%E8%AF%AD%E8%A8%80%E6%97%A0%E5%85%B3%E7%B1%BB/"/>
    
    
      <category term="正则表达式" scheme="http://yoursite.com/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>利用Opera浏览器简单实现科学上网(翻墙)</title>
    <link href="http://yoursite.com/2018/06/02/%E5%88%A9%E7%94%A8Opera%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91-%E7%BF%BB%E5%A2%99/"/>
    <id>http://yoursite.com/2018/06/02/利用Opera浏览器简单实现科学上网-翻墙/</id>
    <published>2018-06-02T05:47:45.000Z</published>
    <updated>2018-06-02T07:46:47.057Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载opera浏览器"><a href="#下载opera浏览器" class="headerlink" title="下载opera浏览器"></a>下载opera浏览器</h3><p>官网可能下载不了，推荐在360软件商店中进行下载。<br><img src="/2018/06/02/利用Opera浏览器简单实现科学上网-翻墙/download-opera.png" alt=""></p><h3 id="设置本地位置"><a href="#设置本地位置" class="headerlink" title="设置本地位置"></a>设置本地位置</h3><p>以win10为例， 进入控制面板找到时钟和区域点击更改位置。设置为香港特别行政区。<br><img src="/2018/06/02/利用Opera浏览器简单实现科学上网-翻墙/set-locality.png" alt=""></p><h3 id="打开opera浏览器进行设置"><a href="#打开opera浏览器进行设置" class="headerlink" title="打开opera浏览器进行设置"></a>打开opera浏览器进行设置</h3><p>打开opera浏览器在设置中找到隐私和安全，然后启用vpn。<br><img src="/2018/06/02/利用Opera浏览器简单实现科学上网-翻墙/set-opera.png" alt=""></p><h3 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h3><p>大家就可以愉快地上网了。<br><img src="/2018/06/02/利用Opera浏览器简单实现科学上网-翻墙/over.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载opera浏览器&quot;&gt;&lt;a href=&quot;#下载opera浏览器&quot; class=&quot;headerlink&quot; title=&quot;下载opera浏览器&quot;&gt;&lt;/a&gt;下载opera浏览器&lt;/h3&gt;&lt;p&gt;官网可能下载不了，推荐在360软件商店中进行下载。&lt;br&gt;&lt;img src=
      
    
    </summary>
    
      <category term="windows日常" scheme="http://yoursite.com/categories/windows%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="翻墙" scheme="http://yoursite.com/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="windows" scheme="http://yoursite.com/tags/windows/"/>
    
  </entry>
  
  <entry>
    <title>Github上Markdown语法总结</title>
    <link href="http://yoursite.com/2018/05/28/Github%E4%B8%8AMarkdown%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2018/05/28/Github上Markdown语法总结/</id>
    <published>2018-05-28T06:36:23.000Z</published>
    <updated>2018-05-28T07:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>Markdown中标题如果想定义一个标题，可以在前面加上#关键字。<br>1-6个#号对应表示1-6级标题，标准Markdown语法#与正文之间有空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure></p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>无序列表: 关键字* 或者(-,+)， 有序列表: 使用”数字.”格式， 后面需要加空格再写正文。<br>列表之间也可以相互嵌套， 需要嵌套加上一个tab键。取消列表按两个回车。<br>任务列表: - [x] 已完成任务列表。- [ ] 未完成任务列表[空格]。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line"></span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line"></span><br><span class="line">- 无序列表</span><br><span class="line">1. 有序列表</span><br><span class="line">2. 有序列表</span><br><span class="line">3. 有序列表</span><br><span class="line">- 无序列表</span><br><span class="line">- 无序列表</span><br><span class="line"></span><br><span class="line">- [x] 已完成任务列表</span><br><span class="line">- [x] 已完成任务列表</span><br><span class="line">- [] 未完成任务列表</span><br><span class="line">- [] 未完成任务列表</span><br></pre></td></tr></table></figure></p><ul><li>无序列表</li><li>无序列表</li><li>无序列表</li></ul><ol><li>有序列表</li><li>有序列表</li><li>有序列表</li></ol><ul><li>无序列表<ol><li>有序列表</li><li>有序列表</li><li>有序列表<ul><li>无序列表</li><li>无序列表</li></ul></li></ol></li></ul><ul><li style="list-style: none"><input type="checkbox" checked> 已完成任务列表</li><li style="list-style: none"><input type="checkbox" checked> 已完成任务列表</li><li style="list-style: none"><input type="checkbox"> 未完成任务列表</li><li style="list-style: none"><input type="checkbox"> 未完成任务列表</li></ul><h2 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h2><p>Markdown支持4中文本样式分别是：加粗、斜体、删除线和加粗且斜体。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">*斜体*</span><br><span class="line">**加粗**</span><br><span class="line">**_加粗且斜体_**</span><br><span class="line">~~删除线~~</span><br></pre></td></tr></table></figure></p><p><em>斜体</em><br><strong>加粗</strong><br><strong><em>加粗且斜体</em></strong><br><del>删除线</del></p><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>只需要在文本前加入 &gt; 这种尖括号（大于号）即可，引用之间也可以嵌套。</p><blockquote><p>这是一个引用</p><blockquote><p>这也是一个引用</p><blockquote><p>这还是一个引用</p></blockquote></blockquote></blockquote><h2 id="引用代码"><a href="#引用代码" class="headerlink" title="引用代码"></a>引用代码</h2><p>引入一个代码用倒引号`括起来<br>引用一段代码用三个倒引号括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用一段代码</span><br><span class="line">int a = 10;</span><br><span class="line">int b = 20;</span><br><span class="line">int c = a + b;</span><br><span class="line">cout&lt;&lt;c&lt;&lt;endl;</span><br></pre></td></tr></table></figure><p>上面可以直接在三个倒引号后面加入引用代码的语言类型。编辑器会对应的进行渲染。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">引用一段代码</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> c = a + b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c&lt;&lt;<span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><h2 id="引入链接"><a href="#引入链接" class="headerlink" title="引入链接"></a>引入链接</h2><h3 id="文字链接"><a href="#文字链接" class="headerlink" title="文字链接"></a>文字链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[文字描述](链接地址)</span><br><span class="line">[百度](http://www.baidu.com)</span><br></pre></td></tr></table></figure><p><a href="http://www.baidu.com" target="_blank" rel="noopener">百度</a></p><h3 id="图片链接"><a href="#图片链接" class="headerlink" title="图片链接"></a>图片链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">![](图片url或本地链接)</span><br><span class="line">![](Github上Markdown语法总结/佩奇.jpg)</span><br></pre></td></tr></table></figure><p><img src="/2018/05/28/Github上Markdown语法总结/佩奇.jpg" alt=""></p><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">第一表头 | 第二表头</span><br><span class="line">------------ | -------------</span><br><span class="line">第一单元格内容 | 第二单元格内容</span><br><span class="line">第一列内容 | 第二列内容</span><br></pre></td></tr></table></figure><table><thead><tr><th>第一表头</th><th>第二表头</th></tr></thead><tbody><tr><td>第一单元格内容</td><td>第二单元格内容</td></tr><tr><td>第一列内容</td><td>第二列内容</td></tr></tbody></table><h2 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h2><p>可以用反斜杠来插入一些在语法中有其它意义的符号，如：可以在星号的前面加上反斜杠。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\*literal asterisks\*</span><br></pre></td></tr></table></figure></p><p><em>literal asterisks</em></p><p>反斜杠支持下面的字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">\   反斜杠</span><br><span class="line">`   反引号</span><br><span class="line">*   星号</span><br><span class="line">_   底线</span><br><span class="line">&#123;&#125;  大括号</span><br><span class="line">[]  方括号</span><br><span class="line">()  括号</span><br><span class="line">#   井字号</span><br><span class="line">+    加号</span><br><span class="line">-    减号</span><br><span class="line">.   英文句点</span><br><span class="line">!   惊叹号</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;标题&quot;&gt;&lt;a href=&quot;#标题&quot; class=&quot;headerlink&quot; title=&quot;标题&quot;&gt;&lt;/a&gt;标题&lt;/h2&gt;&lt;p&gt;Markdown中标题如果想定义一个标题，可以在前面加上#关键字。&lt;br&gt;1-6个#号对应表示1-6级标题，标准Markdown语法#与正文
      
    
    </summary>
    
      <category term="实用工具" scheme="http://yoursite.com/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Markdown" scheme="http://yoursite.com/tags/Markdown/"/>
    
  </entry>
  
</feed>
